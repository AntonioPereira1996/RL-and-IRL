#+TITLE: Code for the SL cascading approach to IRL

FIXME: Faire un header propre pour ces trucs

La méthode, décrite ailleurs consiste à :

$<s_i,a_i>$ -[classifieur]-> $q(s,a) = \omega^T\phi(s,a)$ 

$D_E = <s_i,q(s_i,a_i)-\gamma q(s'_i,a'_i)>$
$D_C = <s_i,q(s_i,a_i)-\gamma q(s'_i,a*)>$

$D_E$ -[regresseur]-> $\hat\R_E(s) = \theta_E^T\psi(s)$
$D_C$ -[regresseur]-> $\hat\R_C(s) = \theta_C^T\psi(s)$

Donc en résumé, en entrée l'on prend en entrée un set de transitions $<s_i,a_i,eoe>$ venant de l'expert, ainsi que deux features $\phi$ et $\psi$ et l'on renvoie deux matrices $\theta_E$ et $\theta_C$ définissant une récompense.

#+begin_src python :tangle Cascading.py
from LAFEM import *
from numpy import *
import scipy.linalg

def run( D, psi, phi, Actions ):
    "Run the cascading algorithm"
    omega_q = classif_score( D, phi, Actions )
    q = lambda s,a : dot( omega_q.transpose(), phi( s, a ) )
    D_E = shape_for_E_regression( D, q, psi )
    D_C = shape_for_C_regression( D, q, psi, Actions )
    theta_E = regression( D_E )
    theta_C = regression( D_C )
    return [theta_E,theta_C]

def classif_score( D, phi, Actions ):
    "Returns the omega matrix so that \omega^T\phi(s,a) allows for classification of elements s with labels a"
    #Il s'avere que SCIRL, notre algo d'IRL peut etre adapte pour
    #faire de la classification, il suffit de lui fournir, en lieu et place de $\mu_E$
    #n'importe quelle feature
    class IRL2classif_hack( LAFEM ):
        data = D
        Threshold = 0.1 #Sensible default
        T = 40 #Sensible default
        A = Actions
        def __init__( self ):
            s_0 = D[0][0]
            a_0 = D[0][1]
            self.theta_0 = zeros( phi( s_0, a_0 ).shape )
        def l( self, s, a ):
            try:
                filter( lambda sa : all(sa[0] == s) and all(sa[1] == a), self.data )[0] #Same action as the expert
                return 0
            except IndexError: #The action of the expert was different from a
                return 1
        def mu_E( self, s, a ):
            return phi( s, a )
        def alpha( self, t):
            return 3./(t+1) #Sensible default
    classifier = IRL2classif_hack()
    return classifier.run()

def regression( data ):
    "When given data of the form [[x,y]...] returns \omega to that \omega^Tx = y, almost"
    #The formula is omega = (X^TX)^{-1}X^TY
    X = zeros(( len( data ), data[0][0].shape[1] ))
    Y = zeros(( len( data ), data[0][1].shape[1] ))
    for i in range(0,len(data)):
        X[i,:] = data[i][0]
        Y[i,:] = data[i][1]
    #FIXME Achtung regularisation
    return dot( dot( scipy.linalg.inv( dot( X.transpose(), X ) +0.1*identity( X.shape[1] )), X.transpose() ) , Y)

def shape_for_E_regression( D, q, psi ):
    "Given data of the form [[s,a],...,[s,a]], returns the matrix [[psi(s)^T,q(s,a)-gamma*q(s',a')],...]"
    def hatR( sasa ):
        s = sasa[0]
        a = sasa[1]
        ss = sasa[2]
        aa = sasa[3]
        return [ psi( s ).transpose(), q(s,a) - 0.9*q( ss, aa )] #FIXME: hard coded gamma
    return map( hatR, shape_as_sasa( D ) )

def shape_for_C_regression( D, q, psi, Actions ):
    "Given data of the form [[s,a],...,[s,a]], returns the matrix [[psi(s)^T,q(s,a)-gamma*q(s',a*)],...]"
    def hatR( sasa ):
        s = sasa[0]
        a = sasa[1]
        ss = sasa[2]
        astar = max( [ [ss,x] for x in Actions ], key=lambda sa : q( sa[0], sa[1] ) )[1]
        return [ psi( s ).transpose(), q(s,a) - 0.9*q( ss, astar )] #FIXME: hard coded gamma
    return map( hatR, shape_as_sasa( D ) )


def shape_as_sasa( D ):
    "Given data of the form [[s,a],...,[s,a]], returns data of the form [[s,a,s',a'],...]"
    s = map( lambda sa: sa[0], D[0:-1] )
    a = map( lambda sa: sa[1], D[0:-1] )
    ss = map( lambda sa: sa[0], D[1:] ) #ss stands for s'
    aa = map( lambda sa: sa[1], D[1:] ) #and aa for a'
    return map( lambda x,y,z,t : [x,y,z,t], s, a, ss, aa )

#+end_src
#+srcname: Cascading_code_make
#+begin_src makefile
Cascading.py: Cascading.org
	$(call tangle,"Cascading.org")
#+end_src
