#+TITLE: Cascading IRL on the GridWorld

* Computation
#+begin_src python :tangle Cascading_Exp2.py
import sys
sys.path+=['..']
from numpy import *
import scipy
import Cascading
import GridWorld

from DP import *
from DP_mu import *


D_E = genfromtxt( sys.argv[1] )
assert D_E[-1,6] == 0 #End of episode ?
Data = map( lambda trans: [trans[0:2],trans[2:3][0],trans[3:5],trans[6:7][0]], D_E ) #s,a,s',eoe 
theta_E,theta_C,omega_Q = Cascading.run( Data, GridWorld.psi, GridWorld.phi, GridWorld.A )

perf_E = GridWorld.evaluate_theta( theta_E, GridWorld.psi )
perf_C = GridWorld.evaluate_theta( theta_C, GridWorld.psi )

Pi_classif = omega2pi( omega_Q, GridWorld.phi, GridWorld.Sgenerator(), GridWorld.s_index, [GridWorld.P( a ) for a in GridWorld.A ] )
perf_classif = GridWorld.evaluate_Pi( Pi_classif )[0]

print "%d\t%lf\t%lf\t%lf"%(D_E.shape[0], perf_E, perf_C, perf_classif )

#+end_src

#+srcname: Cascading_Exp2_make
#+begin_src makefile
Cascading_Exp2.py: Cascading_Exp2.org
	$(call tangle,"Cascading_Exp2.org")

Cascading_Exp2: Cascading_Exp2.py GridWorld.py ../DP.py Mu_E.mat ../Cascading.py ../LAFEM.py DE.py ../a2str.py
	for i in $(LM_VALUES); \
	do \
	python DE.py $$i > DE.mat; \
	python Cascading_Exp2.py DE.mat >> Cascading_Exp2.mat; \
	done


../Cascading.py:
	make -C .. Cascading.py

#+end_src

* Plotting
#+begin_src python :tangle Cascading_Exp2_plot.py
from matplotlib import rc
rc('text', usetex=True)
import sys
sys.path+=['..']
from numpy import *
import scipy
import pylab as pylab
from Plot import *

D_Cascading = genfromtxt( "Cascading_Exp2.mat" )
D_E = D_Cascading[:,[0,1]]
D_C = D_Cascading[:,[0,2]]
D_Classif = D_Cascading[:,[0,3]]
[XE,Y_meanE,Y_minE,Y_maxE] = map( array, mean_min_max( D_E ))
[XE,Y_meanE,Y_varE] = map( array, mean_var( D_E ))
[XC,Y_meanC,Y_minC,Y_maxC] = map( array, mean_min_max( D_C ))
[XC,Y_meanC,Y_varC] = map( array, mean_var( D_C ))
[XClassif,Y_meanClassif,Y_minClassif,Y_maxClassif] = map( array, mean_min_max( D_Classif ))
[XClassif,Y_meanClassif,Y_varClassif] = map( array, mean_var( D_Classif ))

Expert = 4.11057152*ones(XE.shape) #python Expert.py to get this value
Random_mean = 0.44716131254651209*ones(XE.shape)#See Highway.org about Random.py for information on these values
Random_min = 0.070870373379200005*ones(XE.shape)#python Random.py to get this value
Random_max = 3.9837417388*ones(XE.shape)#python Random.py to get this value
Random_var = 0.79871008754797834*ones(XE.shape)#python Random.py to get this value
x_min = min(XE)
x_max = max(XE)
y_max = 5.0 #Comme ca l'expert peut respirer
y_min = min( Random_min[0],min(Y_minE) ) - 1.2


#First plot, Cascading, alone
pylab.figure(1)
pylab.clf()
pylab.axis([x_min,x_max,y_min,y_max])
pylab.xlabel('Number of samples from the expert')
pylab.ylabel('${1\over card(S)}\sum\limits_{s\in S}V(s)$')
pylab.grid(True)
filled_mean_min_max( pylab, XE, Y_meanE, Y_minE, Y_maxE, 'red', 0.2,'--',"Cascading IRL",None)
filled_mean_min_max( pylab, XE, Y_meanE, Y_meanE - Y_varE, Y_meanE + Y_varE, 'red', 0.4,'-.' ,None,None)
filled_mean_min_max( pylab, XE, Random_mean, Random_min, Random_max, 'cyan',0.2,'--',"Agent trained on a random reward",None)
filled_mean_min_max( pylab, XE, Random_mean, Random_mean-Random_var, Random_mean+Random_var, 'cyan',0.4,'-.',None,None)
pylab.plot(XE,Expert, color='blue',label="Expert",lw=2)
pylab.savefig('Cascading_Exp2_fig1.pdf')

#Second plot, Classification step, alone
pylab.figure(2)
pylab.clf()
pylab.axis([x_min,x_max,y_min,y_max])
pylab.xlabel('Number of samples from the expert')
pylab.ylabel('${1\over card(S)}\sum\limits_{s\in S}V(s)$')
pylab.grid(True)
filled_mean_min_max( pylab, XClassif, Y_meanClassif, Y_minClassif, Y_maxClassif, 'red', 0.2,'--',"Cascading IRL",None)
filled_mean_min_max( pylab, XClassif, Y_meanClassif, Y_meanClassif - Y_varClassif, Y_meanClassif + Y_varClassif, 'red', 0.4,'-.' ,None,None)
filled_mean_min_max( pylab, XE, Random_mean, Random_min, Random_max, 'cyan',0.2,'--',"Agent trained on a random reward",None)
filled_mean_min_max( pylab, XE, Random_mean, Random_mean-Random_var, Random_mean+Random_var, 'cyan',0.4,'-.',None,None)
pylab.plot(XE,Expert, color='blue',label="Expert",lw=2)
pylab.savefig('Cascading_Exp2_fig2.pdf')


#+end_src
FIXME: Le plot concernat ANIRL devrait avoir son code dans ANIRL_Exp6.org et non ici.

#+srcname: Cascading_Exp2_make
#+begin_src makefile
Cascading_Exp2_plot.py: Cascading_Exp2.org
	$(call tangle,"Cascading_Exp2.org")

Cascading_Exp2_fig1.pdf: Cascading_Exp2_plot.py Cascading_Exp2.mat ../Plot.py
	python Cascading_Exp2_plot.py
#+end_src


* Stuff
  #+srcname: Cascading_Exp2_clean_make
  #+begin_src makefile
Cascading_Exp2_clean:
	find . -maxdepth 1 -iname "Cascading_Exp2.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp2.tex"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp2_*"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp2.mat"   | xargs $(XARGS_OPT) rm
  #+end_src
