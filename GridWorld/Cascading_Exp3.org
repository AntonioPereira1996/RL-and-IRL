#+TITLE: Cascading IRL (SxA version) on the GridWorld

* Computation
#+begin_src python :tangle Cascading_Exp3.py
import sys
sys.path+=['..']
from numpy import *
import scipy
import Cascading
import GridWorld

from DP import *
from DP_mu import *


D_E = genfromtxt( sys.argv[1] )
assert D_E[-1,6] == 0 #End of episode ?
Data = map( lambda trans: [trans[0:2],trans[2:3][0],trans[3:5],trans[6:7][0]], D_E ) #s,a,s',eoe 
theta_SA = Cascading.runSA( Data, GridWorld.phi, GridWorld.A )
perf_SA = GridWorld.evaluate_thetaSA( theta_SA, GridWorld.phi )

print "%d\t%lf"%(D_E.shape[0], perf_SA )

#+end_src

#+srcname: Cascading_Exp3_make
#+begin_src makefile
Cascading_Exp3.py: Cascading_Exp3.org
	$(call tangle,"Cascading_Exp3.org")

Cascading_Exp3: Cascading_Exp3.py GridWorld.py ../DP.py Mu_E.mat ../Cascading.py ../LAFEM.py DE.py ../a2str.py
	for i in $(LM_VALUES); \
	do \
	python DE.py $$i > DE.mat; \
	python Cascading_Exp3.py DE.mat >> Cascading_Exp3.mat; \
	done


../Cascading.py:
	make -C .. Cascading.py

#+end_src

* Plotting
#+begin_src python :tangle Cascading_Exp3_plot.py
from matplotlib import rc
rc('text', usetex=True)
import sys
sys.path+=['..']
from numpy import *
import scipy
import pylab as pylab
from Plot import *

D_Cascading = genfromtxt( "Cascading_Exp3.mat" )
D = D_Cascading[:,[0,1]]
[X,Y_mean,Y_min,Y_max] = map( array, mean_min_max( D ))
[X,Y_mean,Y_var] = map( array, mean_var( D ))

Expert = 4.11057152*ones(X.shape) #python Expert.py to get this value
Random_mean = 0.44716131254651209*ones(X.shape)#See Highway.org about Random.py for information on these values
Random_min = 0.070870373379200005*ones(X.shape)#python Random.py to get this value
Random_max = 3.9837417388*ones(X.shape)#python Random.py to get this value
Random_var = 0.79871008754797834*ones(X.shape)#python Random.py to get this value
x_min = min(X)
x_max = max(X)
y_max = 5.0 #Comme ca l'expert peut respirer
y_min = min( Random_min[0],min(Y_min) ) - 1.2


#First plot, Cascading, alone
pylab.figure(1)
pylab.clf()
pylab.axis([x_min,x_max,y_min,y_max])
pylab.xlabel('Number of samples from the expert')
pylab.ylabel('${1\over card(S)}\sum\limits_{s\in S}V(s)$')
pylab.grid(True)
filled_mean_min_max( pylab, X, Y_mean, Y_min, Y_max, 'red', 0.2,'--',"Cascading IRL over $S\times A$",None)
filled_mean_min_max( pylab, X, Y_mean, Y_mean - Y_var, Y_mean + Y_var, 'red', 0.4,'-.' ,None,None)
filled_mean_min_max( pylab, X, Random_mean, Random_min, Random_max, 'cyan',0.2,'--',"Agent trained on a random reward",None)
filled_mean_min_max( pylab, X, Random_mean, Random_mean-Random_var, Random_mean+Random_var, 'cyan',0.4,'-.',None,None)
pylab.plot(X,Expert, color='blue',label="Expert",lw=2)
pylab.savefig('Cascading_Exp3_fig1.pdf')
#FIXME prendre un cercle chromatique et attribuer une couleur a chaque algorithme
#FIXME factoriser ce code de trace qui se retrouve partout
#+end_src
FIXME: Le plot concernat ANIRL devrait avoir son code dans ANIRL_Exp6.org et non ici.

#+srcname: Cascading_Exp3_make
#+begin_src makefile
Cascading_Exp3_plot.py: Cascading_Exp3.org
	$(call tangle,"Cascading_Exp3.org")

Cascading_Exp3_fig1.pdf: Cascading_Exp3_plot.py Cascading_Exp3.mat ../Plot.py
	python Cascading_Exp3_plot.py
#+end_src


* Stuff
  #+srcname: Cascading_Exp3_clean_make
  #+begin_src makefile
Cascading_Exp3_clean:
	find . -maxdepth 1 -iname "Cascading_Exp3.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp3.tex"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp3_*"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp3.mat"   | xargs $(XARGS_OPT) rm
  #+end_src
