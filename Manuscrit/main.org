#+TITLE:Plan
* Options and headers :noexport:
#+OPTIONS: tags:0
# (setq org-export-latex-hyperref-format "\\ref{%s}")
#+LaTeX_CLASS: article 
#+LaTeX_CLASS_OPTIONS: [frenchb]


#+LATEX_HEADER: \usepackage{natbib}
#+latex_header: \usepackage{stmaryrd}
#+LaTeX_header:\usepackage[utf8]{inputenc}
#+LaTeX_header:\usepackage[T1]{fontenc}
#+LaTeX_header:\usepackage{babel}
#+LaTeX_header:\usepackage{amsthm}
#+LaTeX_header:\newtheorem{proposition}{Proposition}
#+LaTeX_header:\newglossary[angl]{anglicisme}{aot}{atn}{Anglicismes}
#+LaTeX_header:\newcommand{\newangl}[3]{\newglossaryentry{#1}{type=anglicisme,name={\emph{#2}},description={#3}}}
#+LaTeX_header:\makeglossaries

** Acronymes
#+LaTeX_header:\newacronym{mdp}{PDM}{Processus Décisionnel de Markov}
#+LaTeX_header:\newacronym{irl}{ARI}{Apprentissage par Renforcement Inverse}
#+LaTeX_header:\newacronym{dp}{PD}{Programmation Dynamique}
#+LaTeX_header:\newacronym{rl}{AR}{Apprentissage par Renforcement}
#+LaTeX_header:\newacronym{lspi}{LSPI}{\emph{Least Square Policy Iteration}}
#+LaTeX_header:\newacronym{pirl}{PIRL}{\emph{Projection Inverse Reinforcement Learning}}
#+LaTeX_header:\newacronym{mmp}{MMP}{\emph{Maximum Margin Planning}}
#+LaTeX_header:\newacronym{pm}{PM}{\emph{Policy Matching}}
#+LaTeX_header:\newacronym{mwal}{MWAL}{\emph{Multiplicative Weights for Apprenticeship Learning}}
#+LaTeX_header:\newacronym{maxent}{MaxEnt}{\emph{Maximum Entropy}}
#+LaTeX_header:\newacronym{relent}{RelEnt}{\emph{Relative Entropy}}
#+LaTeX_header:\newacronym{lpal}{LPAL}{\emph{Linear Programming for Apprenticeship Learning}}
#+LaTeX_header:\newacronym{birl}{BIRL}{\emph{Bayesian Inverse Reinforcement Learning}}
#+LaTeX_header:\newacronym{gpirl}{GPIRL}{\emph{Gaussian Processes Inverse Reinforcement Learning}}
#+LaTeX_header:\newacronym{firl}{FIRL}{\emph{Feature Inverse Reinforcement Learning}}
#+LaTeX_header:\newacronym{irlgp}{FIRL}{\emph{Inverse Reinforcement Learning with Gaussian Processes}}
#+LaTeX_header:\newacronym{lstdmu}{LSTD-$\mu$}{\emph{Least Square Tenporal Differences feature expectations}}
#+LaTeX_header:\newacronym{lstd}{LSTD}{\emph{Least Square Tenporal Differences}}
#+LaTeX_header:\newacronym{scirl}{SCIRL}{\emph{Structured Classification for Inverse Reinforcement Learning}}
#+LaTeX_header:\newacronym{cascading}{CSI}{\emph{Cascaded Supervised learning for Inverse reinforcement learning}}
#+LaTeX_header:\newacronym{cnn}{CNN}{\emph{Convolutional Neural Network}}
#+LaTeX_header:\newacronym{svm}{SVM}{\emph{Support Vector Machine} (Etonnament bien "traduit" en français par Séparateur à Vaste Marge)}
#+LaTeX_header:\newacronym{gmm}{GMM}{\emph{Gaussian Mixture Model}}
#+LaTeX_header:\newacronym{alvinn}{ALVINN}{\emph{Autonomous Land Vehicle In a Neural Network}}
#+LaTeX_header:\newacronym{churps}{CHURPs}{\emph{Compressed Heuristic Universal Reaction Planners}}
#+LaTeX_header:\newacronym{knn}{$k$-NN}{$k$ \emph{Nearest Neighboors}}
** Anglicismes
#+LaTeX_header:\newangl{batch}{batch}{Par paquet}
#+LaTeX_header:\newangl{offpolicy}{off-policy}{Signifie que la politique qui contrôle le système n'est pas celle qui est évaluée}
#+LaTeX_header:\newangl{onpolicy}{on-policy}{\`A la différence du {\it on-policy}, la politique évaluée est celle qui contrôle le système}
#+LaTeX_header:\newangl{gridworld}{gridworld}{Echiquier, damier}
#+LaTeX_header:\newangl{rewardshaping}{reward shaping}{Transformation de la récompense ne changeant pas les politiques optimales}
#+LaTeX_header:\newangl{mixing}{mixing}{Mixante}
#+LaTeX_header:\newangl{boosting}{boosting}{Ajout de nouveaux attributs}
#+LaTeX_header:\newangl{mountaincar}{mountain-car}{Problème jouet où une voiture doit sortir d'un creux}

* TAF :noexport:
** TODO Articuler les parties problème jouets
** Nettoyage
*** TODO Virer barres à droite graphes psi et mu, utiliser même échelle pour tout le monde (échelle monomodale, d'ailleurs)
*** TODO trouver un moyen de mettre automatiquement les noms (section, equation, etc.) devant les refs (autoref?)
*** TODO Introduire le mountain-car de belle manière
*** TODO virer l'extension glossaire de la table des matières
*** TODO Metre sous forme ODF et envoyer à JCK
** Trucs à ajouter je ne sais où
*** Contre exemple politique, tache
    Je peux décrire une politique sur un espace d'état, mais pas la récompense, exemple. le mettre au début de 2.3.1 ou ailleurs.
*** Echiquier et changement d'espace d'état
    Avec la tour : on peut optimiser de manière différente
    Avec le fou : on peut optimiser mieux si on a pas le même espace d'état
* Axe de recherche 
** Contrôle optimal 
** Trouver la consigne à partir du contrôle 
*** Intérêt intrinsèque
# <<hier:intrinseque>> 
    Approches économiques, biologiques ou psychologiques.
*** Imitation 
# <<hier:general>>
    Cadre général de  l'imitation, mentionner ici les approches sans formalisme \gls{mdp}, si il y en a qu'il est pertinent de mentionner.
    Citer les revues : \cite{argall2009survey,schaal2003computational}, expliquer le cadre large, le problème de l'observabilité de l'expert et de l'adéquation expert/agent (mentionner le changement d'espace d'état?).
** Annonce du plan 
* Formalisme mathématique, notations				       
** Imitation non \gls{irl} 
# <<hier:nonari>>
# Goal:Introduire uniquement le formalisme nécessaire à l'imitation par classification.
# Goal:Ce serait bien qu'on ressente le besoin des notions du \gls{mdp}, notamment la récompense
# Requires:Agent artificiel, environnement, tâche
# Ensures: État, action, politique, classifieur, erreur de classification, politique de l'expert, traces sa, généralisation, attributs, classif structurée de taskar
# ?s policy '\pi' 'Une politique'
# ?s statespace '\mathcal{S}' 'Espace d{\apos}état'
# ?s actionspace '\mathcal{A}' 'Espace d{\apos}action'
# ?cs 2 twosetsfunctions '{#2}^{#1}' 'B^A' 'Ensemble des applications de $A$ dans $B$'
*** Formalisme
   D'un point de vue mathématique, un agent, qu'il soit artificiel ou humain, qu'il s'agisse de l'expert qu'il soit cours d'apprentissage ou même qu'il agisse de manière aléatoire (utile pour l'exploration), implémente une politique. Une politique $\policy$ est formellement définie comme une application d'un espace d'état vers un espace d'action :
\begin{equation}
\policy \in \twosetsfunctions{\statespace}{\actionspace}.
\end{equation}
  
# ?s state 's' 'État'
   Cette politique encode le comportement de l'agent : dans un état $\state \in \statespace$, l'agent choisira l'action $\policy(\state) \in \actionspace$. L'on constate que ce formalisme implique que pour choisir son action, l'agent n'utilise que les informations stockées dans l'état. Il faudra donc en pratique veiller à ce que celui-ci contienne toutes les informations utiles à la prise de décision, c'est à dire par exemple pour un système physique, non seulement les valeurs courantes des capteurs, mais aussi peut-être certaines valeurs passées afin de pouvoir calculer des taux de variation. 
# Exemple: could use an exemple (pendule ?)
# snippet: La notion d'agent artificiel déborde sur l'espace d'état, qui n'est lui même du coup pas directement lié à l'environnement. Un agent, ce n'est pas seulement une politique, mais aussi la définition de l'espace d'état et d'action, qui ne sont qu'une vue (plus ou moins bonne selon l'ingénierie) de la réalité
   
   Les espaces d'état et d'action sont mal nommés puisqu'il s'agit en général non d'espaces vectoriels mais de parties d'espaces vectoriels : la plage de valeurs que peut prendre une composante est rarement illimitée. Il s'agit même parfois de parties finies. C'est dans les problèmes qui nous préoccupent quasiment toujours le cas pour l'espace d'action. Nous considérons par défaut qu'il s'agit d'un ensemble fini de faible cardinal.

*** Classification
# ?s expertpolicy '\pi^E' 'Politique de l{\apos}expert'
   Il est possible de voir le problème de l'imitation comme celui de la recherche d'une politique correspondant point par point (ou au mieux en fonction des contraintes en mémoire et en temps de l'agent) à celle de l'expert. Il est en effet évident que si deux politiques sont identiques alors elles accomplissent la même tâche avec le même degré d'efficacité. Même lorsque la politique de l'expert (notée $\expertpolicy$) est intégralement connue cette formulation n'est pas forcément dénuée de sens, l'on peut en effet souhaiter remplacer l'expert par un agent moins coûteux mais donc probablement plus limité. Apprendre par cœur (ou apprendre au mieux avec quelques erreurs) la politique de l'expert est alors sensé.

   Bien souvent cependant il est impossible de connaître intégralement la politique de l'expert, ne fut-ce que parce que l'espace d'état est trop grand. Il faut alors se contenter d'exemples sur un certain nombre $\nbsamples$ d'états :
# ?cs 1 satrace 'D_{sa}^{#1}' 'D_{sa}^{\policy}' 'Trace de type $s,a$ obtenue en suivant la politique $\policy$'
# ?s nbsamples 'N' 'Nombre d{\apos}exemples dans une trace'
# ?s action 'a' 'Une action'
# ?s datasetindex 'i' 'Entier indexant une base de données'
\begin{equation}
\satrace{\expertpolicy} = \{(\state_{\datasetindex},\action_{\datasetindex}=\expertpolicy(\state_{\datasetindex})) | \datasetindex \in \llbracket 0;\nbsamples-1\rrbracket\}.
\end{equation}

   Le problème de l'imitation se trouve ainsi réduit à celui de la classification. Étant donné que l'espace d'action est fini et de faible cardinal, chaque action est vue comme un label à appliquer à un état. La démonstration de l'expert fournit la base d'entraînement.

# ?s spacedistrib '\rho' 'Loi de probabilité ou fonction de poids'
# ?s classifpolicy '\pi^C' 'Politique issue d{\apos}un classifieur'
# ?s empiricalclassiferror '\epsilon_C^{empirical}' 'Erreur empirique de classification'
# ?cs 1 classiferror '\epsilon_C^{#1}' '\epsilon_C^{\spacedistrib}' 'Erreur théorique de classification sur la distribution $\spacedistrib$'
# ?cs 1 indicatorfunc '\mathds{1}(#1)' '\mathds{1}' 'Fonction indicatrice'
# ?cs 2 expectationknowing '\E \left[\left. #1\right|#2\right]' '\E \left[\left. f(x)\right| x \sim \rho \right]' 'Espérance de $f(x)$ pour $x$ tiré selon $\rho$'
La classification est un problème plus subtil que celui de naïvement apprendre par cœur la base d'entraînement. Ce que nous cherchons à optimiser n'est pas la performance sur la base d'entraînement fournie, mais la performance sur l'espace d'état en général. Plus précisément, certains états nous intéressent plus que d'autres. Pour une justification intuitive, il suffit de penser aux jeux de plateau, où bien agir dans les quelques états qui apparaissent souvent en début de partie est beaucoup plus intéressant que bien agir dans un état bizarre que l'on ne rencontrera peut-être jamais ; d'où par exemple le travail sur les ouvertures aux échecs. Pour mesurer l'importance accordée à un état, l'on définit une fonction de poids qui somme à un : $\spacedistrib \in \twosetsfunctions{\statespace}{[0,1]}$ telle que $\int_{\statespace} \spacedistrib(s) ds = 1$ ou $\sum_{\state \in \statespace} \spacedistrib(\state) = 1$ selon que l'on se trouve en cas continu ou fini. La mesure de l'erreur d'une politique de classification se basant uniquement sur la base d'entraînement :
\begin{equation}
\empiricalclassiferror = {1\over \nbsamples}\sum_{(\state_{\datasetindex},\action_{\datasetindex}) \in \satrace{\expertpolicy}} \indicatorfunc{\classifpolicy(\state_{\datasetindex}) \neq \action_{\datasetindex}}
\end{equation}
est potentiellement différente de celle que l'on cherche réellement à optimiser :
\begin{eqnarray}
\classiferror{\spacedistrib} &=& \sum_{\state \in \statespace} \spacedistrib(\state)\indicatorfunc{\classifpolicy(\state) \neq \expertpolicy(\state)}\\
&=& \expectationknowing{ \indicatorfunc{\classifpolicy(\state) \neq \expertpolicy(\state)}}{\state\sim\spacedistrib}.
\end{eqnarray}
Les problèmes de sur-apprentissage apparaissent lorsque l'on minimise l'erreur empirique au détriment de l'erreur de classification $\classiferror{\spacedistrib}$. Une des difficultés étant malheureusement que l'on ne peut qu'estimer $\classiferror{\spacedistrib}$.

Le choix de la distribution $\spacedistrib$ sur laquelle il nous importe d'optimiser la classification est également un paramètre important. On peut comme on l'a vu intuitivement favoriser les états de départ. Il est possible de tenter d'estimer à partir d'une base d'exemple la vraie distribution des états qui seront soumis au contrôle de l'agent. On peut également pour certains environnements accorder plus d'importance à certains états critiques où une erreur aurait des conséquences fâcheuses.

*** Attributs
\label{hier:attributs}
# ?s featurestateactionspace '\Phi' 'Espace d{\apos}attributs état-action'
# ?s featurestateactionfunc '\phi' 'Fonction d{\apos}attributs état-action'
# ?s dimphi 'd_{\phi}' 'Dimension de l{\apos}espace d{\apos}attributs état-action'
    Ce que l'on appelle la capacité de généralisation d'un classifieur est son aptitude à minimiser l'erreur théorique $\classiferror{\spacedistrib}$ à l'aide de données tirées selon une distribution potentiellement différente de $\spacedistrib$. Cette capacité de généralisation est affectée par la manière dont l'espace d'état apparaît au classifieur. Afin d'obtenir une description exploitable du problème, l'on va souvent choisir de travailler non pas directement dans l'espace d'état-action $\statespace\times\actionspace$ mais dans un espace d'attributs $\featurestateactionspace$ qui est l'image de l'espace d'état-action $\statespace\times\actionspace$ par une fonction vectorielle d'attribut $\featurestateactionfunc \in \twosetsfunctions{\statespace \times \actionspace}{\reals^{\dimphi}}$ :
    \begin{equation}
    \featurestateactionspace = \featurestateactionfunc(\statespace\times\actionspace)
    \end{equation}
Illustrons ce propos par l'étude d'une approche de classification qui utilise une fonction de score linéairement paramétrée sur l'espace d'attribut état-action $\featurestateactionspace$ : \cite[Chapitre 10]{taskar2005learning}.

# ?s classifscorefunc 'q' 'Fonction de score pour la classification'
# ?s reals '\mathbb{R}' 'Le corps des réels'
Le principe quasi-ubiquitaire en classification[fn::Les classifieurs à arbres de décision formant un contre-exemple notable \citep{safavian1991survey}.] de la fonction de score est le suivant : à chaque couple état-action une fonction $\classifscorefunc$ associe un score. Pour associer une action à un état, le classifieur passe simplement en revue toutes les actions (on voit donc l'intérêt d'un petit espace d'action) et choisit celle qui associée à cet état obtient le score le plus haut :
\begin{eqnarray}
\classifscorefunc &\in& \twosetsfunctions{\statespace \times \actionspace}{\reals},\\
\forall \state, \classifpolicy(\state) &=& \arg\max_{\action \in \actionspace} \classifscorefunc(\state,\action).
\end{eqnarray}
Apprendre une bonne fonction de score permet donc de résoudre le problème de classification. L'approche proposée dans \citep{taskar2005learning} prend le parti d'une fonction de score paramétrée linéairement. Il va de soi que rien ne garantit qu'une fonction de score linéaire sur l'espace d'état-action soit en mesure de donner un bon classifieur, dès lors le recours à une fonction d'attribut choisie avec soin est indispensable :
# ?s paramclassif '\omega' 'Vecteur de paramètres pour la classification'
# ?cs 1 transpose '{#1}^{T}' 'X^T' 'Transposée de la matrice ou du vecteur $X$'
\begin{equation}
q(\state,\action) = \transpose{\paramclassif}\featurestateactionfunc(\state,\action)
\end{equation}
Ce que nous cherchons maintenant est donc un bon vecteur de paramètres $\paramclassif$. Une telle recherche serait vaine si les attributs choisis ne permettaient pas d'exprimer une bonne fonction de score.

# ?s featurestatefunc '\psi' 'Fonction d{\apos}attribut sur l{\apos}espace d{\apos}état'
# ?s dimpsi 'd_{\psi}' 'Dimension de l{\apos}espace d{\apos}attributs sur l{\apos}espace d{\apos}état'
# ?cs 1 card '\left|#1\right|' '|A|' 'Cardinal de l{\apos}ensemble A'
Si l'on dispose d'une fonction d'attribut $\featurestatefunc \in \twosetsfunctions{\statespace}{\reals^{\dimpsi}}$ sur l'espace d'état, une technique classique pour obtenir une fonction d'attribut sur l'espace d'état-action consiste à exploser la représentation sur les différentes actions. D'un vecteur de dimension $\dimpsi$, l'on passe à un vecteur de dimension $\dimphi = \card{A}\dimpsi$ (où $\card{\cdot}$ dénote le cardinal d'un ensemble) en définissant :
# ?cs 2 kronecker '{\delta}^{#1}_{#2}' '\delta^i_j' 'Symbole de Kronecker, vaut $1$ si $i=j$, $0$ sinon'
\begin{equation}
\featurestateactionfunc(\state,\action) = \begin{pmatrix}
\kronecker{\action}{\action_1}\featurestatefunc(\state)\\
\vdots\\
\kronecker{\action}{\action_{\card{\actionspace}}}\featurestatefunc(\state)\\
\end{pmatrix}
\end{equation}
avec $\kronecker{i}{j}$ le symbole de Kronecker.

Le choix d'une bonne fonction d'attributs sur l'espace d'état est extrêmement problème-dépendant, néanmoins dans les cas les plus sympathiques deux techniques simples donnent de bons résultats. Dans le cas d'un espace d'état fini de taille raisonnable, il est possible de définir une fonction d'attribut binaire en associant un unique indice à chaque état. Le vecteur d'attribut d'un état est nul partout sauf en l'indice associé à l'état :
\begin{equation}
\featurestatefunc(\state) = \begin{pmatrix}
\kronecker{\state}{\state_1}\\
\vdots\\
\kronecker{\state}{\state_{\card{\statespace}}}\\
\end{pmatrix}.
\end{equation}
Un avantage de ce schéma est qu'il permet une représentation exacte de la fonction de score. En effet le produit $q(\state,\action) = \transpose{\paramclassif}\featurestateactionfunc(\state,\action)$ revient à isoler la composante de $\paramclassif$ correspondant à l'unique indice associé au couple $(\state, \action)$. Les deux gros désavantages sont l'incapacité de ce schéma de passer à l'échelle et l'absence totale de structure : l'on aura beau disposer d'énormément d'information sur les "voisins" d'un élément de l'espace, tant que l'on aura pas vu précisément cet élément dans la base d'exemple, c'est la valeur par défaut de la coordonnée correspondante dans $\paramclassif$ qui sera utilisée.

# ?cs 1 gaussperdim 'g_{#1}' 'g_i' 'Nombre de gaussiennes pour la dimension $i$ dans un vecteur d{\apos}attribut basé sur un réseau de gaussiennes'
# ?s dimstate 'd_{\mathcal{S}}' 'Dimension de l{\apos}espace d{\apos}état'
# ?s gaussiancenter 'm' 'Centre d{\apos}une gaussienne'
# ?s gaussianvar '\sigma' 'Variance d{\apos}une gaussienne'
# ?cs 3 gaussian '\mathfrak{G}^{#1}_{#2}(#3)' '\mathfrak{G}^{m}_{\sigma}' 'Fonction gaussienne de centre $m$ et de variance $\sigma$'
# ?cs 2 component '{#1}^{#2}' 'X^j' 'Composante $j$ du vecteur $X$'
# ?s dimindex 'j' 'Entier indexant les dimensions d{\apos}un espace'
# ?s dimindexbis 'k' 'Entier indexant les dimensions d{\apos}un espace'
# FIXME: Vérifier sigma et G lorsque j'écrirai le code permettant de dessiner les features
Pour les espaces continus, une paramétrisation usuelle consiste à paver l'espace de gaussiennes. L'on assigne un nombre $\gaussperdim{\dimindex}$ à chacune des dimensions $0 < \dimindex \leq \dimstate$ de l'espace d'état et l'on construit un maillage de $\dimpsi = \prod_{\dimindex=1}^{\dimstate}\gaussperdim{\dimindex}$ points $m_{\dimindexbis}, 0<\dimindexbis\leq\dimpsi$ répartis à équidistance dans l'espace qui seront les centres des $\dimpsi$ composantes gaussiennes de la fonction d'attribut. La variance pour une dimension $\dimindex$ peut être choisie par exemple comme 
\begin{equation}
\gaussianvar^{\dimindex} = { \max(\component{\state}{\dimindex})-\min(\component{\state}{\dimindex})\over 2 \gaussperdim{\dimindex}}.
\end{equation}
En notant :
\begin{equation}
\gaussian{\gaussiancenter}{\gaussianvar}{s} = \exp\left(-\sum_{\dimindex=1}^{\dimstate}{\component{s}{\dimindex}-\component{\gaussiancenter}{\dimindex}\over 2\component{\gaussianvar}{\dimindex}}\right),
\end{equation}
on obtient finalement la fonction d'attribut suivante :
\begin{equation}
\featurestatefunc(s) = \begin{pmatrix}
\gaussian{\gaussiancenter_{1}}{\sigma}{s}\\
\vdots\\
\gaussian{\gaussiancenter_{\dimpsi}}{\sigma}{s}\\
1
\end{pmatrix}.
\end{equation}
Contrairement à la fonction d'attribut binaire précédente, celle-ci possède une structure spatiale. Les scores de deux états proches subiront l'influence de la même composante du vecteur de paramètre. Quand le nombre de dimension augmente, le nombre de gaussiennes du réseau explose. Cette technique n'échappe donc pas à la malédiction de la dimension. Une composante constante est ajoutée. Une illustration de ce type d'attributs sur l'espace d'état du \gls{mountaincar} est présentée \ref{fig:mountain_car_psi}.
\begin{figure}
\begin{tikzpicture}[scale=2]
%\draw [help lines] (0,0) grid (6,-6);
\node at (0,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x0}};
\node at (0,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x0}};
\node at (0,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x0}};
\node at (0,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x0}};
\node at (0,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x0}};
\node at (0,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x0}};
\node at (0,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x0}};

\node at (1,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x1}};
\node at (1,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x1}};
\node at (1,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x1}};
\node at (1,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x1}};
\node at (1,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x1}};
\node at (1,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x1}};
\node at (1,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x1}};

\node at (2,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x2}};
\node at (2,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x2}};
\node at (2,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x2}};
\node at (2,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x2}};
\node at (2,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x2}};
\node at (2,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x2}};
\node at (2,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x2}};

\node at (3,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x3}};
\node at (3,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x3}};
\node at (3,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x3}};
\node at (3,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x3}};
\node at (3,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x3}};
\node at (3,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x3}};
\node at (3,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x3}};

\node at (4,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x4}};
\node at (4,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x4}};
\node at (4,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x4}};
\node at (4,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x4}};
\node at (4,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x4}};
\node at (4,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x4}};
\node at (4,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x4}};

\node at (5,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x5}};
\node at (5,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x5}};
\node at (5,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x5}};
\node at (5,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x5}};
\node at (5,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x5}};
\node at (5,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x5}};
\node at (5,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x5}};

\node at (6,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_6x6}};
\node at (6,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_5x6}};
\node at (6,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_4x6}};
\node at (6,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_3x6}};
\node at (6,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_2x6}};
\node at (6,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_1x6}};
\node at (6,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_psi_0x6}};
\end{tikzpicture}
\caption{Attributs gaussiens sur le problème du \gls{mountaincar}. L'espace d'état est pavé de $7\times 7 = 49$ gaussiennes dont les centres sont répartis à équidistance. Les variances sont les mêmes pour toutes les gaussiennes et dépendent de la plage de valeur sur une dimension. Toute fonction aux variations raisonnables peut être approximée de manière correcte par une somme pondérée de ces gaussiennes.}
\label{fig:mountain_car_psi}
\end{figure}


Considérant maintenant que nous disposons d'un vecteur d'attribut permettant de continuer, examinons la fonction de coût que \citet{taskar2005learning} se propose de minimiser (l'expression est modifiée pour coller à la formulation de \cite{ratliff2007imitation}, cela s'avère plus pratique pour la minimisation) :
# FIXME se mettre exactement au clair sur les différents papiers de ratliff
# ?cs 1 best '{#1}^{*}' 'x^*' 'Element issu d{\apos}un $\arg\max_x$'
# ?s margin '\mathfrak{l}' 'Fonction de marge dans le classifieur à marge'
# ?s structuredcost 'J' 'Fonction de coût de la classification structurée'
\begin{eqnarray}
\structuredcost(\classifscorefunc) &=& {1\over \nbsamples} \sum_{\datasetindex=1}^{\nbsamples} \classifscorefunc(\state_{\datasetindex},\best{\action}_{\datasetindex}) + \margin(\state_{\datasetindex},\best{\action}_{\datasetindex}) - \classifscorefunc(\state_{\datasetindex},\action_{\datasetindex})\\
\structuredcost(\paramclassif) &=& {1\over \nbsamples} \sum_{\datasetindex=1}^{\nbsamples} \transpose{\paramclassif}\featurestatefunc(\state_{\datasetindex},\best{\action}_{\datasetindex}) + \margin(\state_{\datasetindex},\best{\action}_{\datasetindex}) - \transpose{\paramclassif}\featurestatefunc(\state_{\datasetindex},\action_{\datasetindex})\\
\textrm{avec : }\best{\action}_{\datasetindex} &=& \arg\max_{\action \in \actionspace} \classifscorefunc(\state_{\datasetindex},\action) + \margin(\state_{\datasetindex},\action)\\
 &=& \arg\max_{\action \in \actionspace} \transpose{\paramclassif}\featurestatefunc(\state_{\datasetindex},\action) + \margin(\state_{\datasetindex},\action).
\end{eqnarray}

La fonction de marge $\margin$ est là pour donner à ce classifieur sa capacité de généralisation. En effet, on constate que si $\margin$ est uniformément nulle, alors parvenir à minimiser parfaitement la fonction de coût revient à apprendre par cœur la base d'exemple, c'est à dire à probablement subir les effets du sur-apprentissage. Fixer 
\begin{equation}
\margin(\state_{\datasetindex},\action) = \begin{cases}
0 &\textrm{si }\action = \action_{\datasetindex}\\
1 &\textrm{si }\action \neq \action_{\datasetindex}
\end{cases}
\end{equation}
permet d'introduire un marge assez simple : minimiser la fonction de coût apprend une fonction de score qui donne aux choix de l'expert un score supérieur aux score des autres choix. \citet{taskar2005learning} précise qu'il est possible d'adapter la marge $\margin$ en fonction de la qualité des choix alternatifs, un bon choix correspondant à une petite marge. Nous verrons qu'en pratique la marge binaire que nous venons de suggérer fonctionne assez bien.

# ?s subgrad '\nabla' 'Sous gradient d{\apos}une fonction'
Nous empruntons à \cite{ratliff2006maximum} une technique simple pour minimiser cette fonction de coût, basée sur une descente de sous gradient. Le sous gradient de la fonction de coût est :
\begin{equation}
\subgrad\structuredcost(\paramclassif) = \sum_{\datasetindex=1}^{N}\featurestatefunc(\state_{\datasetindex},\best{\action}_{\datasetindex}) - \featurestatefunc(\state_{\datasetindex},\action_{\datasetindex})
\end{equation}

Nous avons présenté cette technique de classification plus en détail à des fins d'illustration de l'importance du choix des attributs, et également car nous la retrouverons plus loin dans le manuscrit lorsque nous nous intéresserons aux techniques d'\gls{irl}.

Il existe bien d'autres moyen de faire de la classification, comme par exemple les \gls{svm}.
*** \gls{svm}
# FIXME: Ecrire la sous partie sur les SVMs
# Goal: Faire une description rapide des MCSVM et de leurs avantages.
# Goal: Introduire la notion de noyau, de kenel-trick et faire le lien avec les attributs (poil au cul)
# Requires: attribut, classification
# Ensures noyau, kernel-trick, SVM
- Citer la généralisation de Yann.
- Parler du kernel-trick, faire le lien avec les attributs.
- Illustration mountain car : montrer les attributs choisis automatiquement par l'implémentation de la SVM choisie
Nous aurons également à faire avec des \gls{svm} dans la suite du manuscrit. Bien d'autres techniques de classification existent, une description exhaustive des techniques d'apprentissage supervisé propices à l'imitation dépasserait le cadre de cette thèse. \citet{hastie2005elements,vapnik1998statistical} sont des ouvrages de référence. Nous allons voir comment ces techniques ont été appliquées en pratique à l'apprentissage supervisé de la politique de l'expert.
*** Imitation par apprentissage supervisé de la politique
# <<hier:myopie>>
# Goal:Faire l'état de l'art des techniques d'imitation par apprentissage supervisé
# Goal:Ce serait bien qu'on ressente le besoin des notions du \gls{mdp}, notamment la récompense (bis)
# Requires:Classifieur, attributs, classif de taskar, (boosting?)
# Ensures: Boosting, ratliff2007imitation, 
Apprendre la politique de l'expert de manière supervisée à l'aide d'une base d'exemples peut s'avérer efficace, comme le démontrent plusieurs approches. Dans \citep{ratliff2007imitation}, les auteurs utilisent le classifieur à marge décrit plus haut
# checkref
# ?s featurestateactionhypothesisspace '\mathcal{H}_{\Phi}' 'Espace d{\apos}hypothèse où choisir une nouvelle composante pour l{\apos}attribut état action'
# ?cs 2 scalarprod '\left\langle\left.{#1}\right | {#2}\right\rangle' '\langle x|y\rangle' 'Produit scalaire de $x$ et $y$'
pour apprendre une politique experte sur un problème de locomotion quadrupède et sur un problème de manipulation d'objets. Le choix des attributs est simplifié grâce à une technique de \gls{boosting} similaire à \cite{friedman2001greedy,mason1999functional} : on choisit dans un espace d'hypothèse la fonction qui, ajoutée comme composante supplémentaire de la fonction d'attribut, aiderait le mieux à minimiser la fonction de coût. Mathématiquement, on choisit la fonction dont le produit scalaire avec le gradient de la fonction de coût est minimal : la nouvelle composante $\featurestateactionfunc_{\dimphi +1}$ est choisie dans l'espace d'hypothèse $\featurestateactionhypothesisspace$ selon 
\begin{equation}
\featurestateactionfunc_{\dimphi +1} = \arg\max_{\featurestateactionfunc\in \featurestateactionhypothesisspace} \scalarprod{\featurestateactionfunc}{-\subgrad \structuredcost}.
\end{equation}

Le boosting permet de déplacer de manière intelligente le problème du choix des attributs, sans le régler totalement. Il reste en effet à construire l'espace d'hypothèse $\featurestateactionhypothesisspace$ où choisir les nouveaux attributs. Un espace trop simple ne permettrait pas de minimiser efficacement la fonction de coût, tandis qu'un espace trop centré sur les données permettrait de la minimiser totalement, mais sans doute au prix d'un sur-apprentissage aux conséquences fâcheuses. C'est donc cet espace qui doit être calibré et construit afin de donner au classifieur ses capacités de généralisation. \citet{ratliff2007imitation} proposent d'utiliser un réseau de neurones.

Plus brutale, l'approche de \citet{lecun2006off} utilise un \gls{cnn} à 6 couches pour apprendre une association directe entre une image (stéréo) d'entrée et un angle de braquage (la tâche à apprendre est la conduite d'un véhicule en terrain libre). Le problème de la généralisation est résolu en exigeant une base d'entraînement couvrant au maximum l'espace d'état. Les auteurs ne cachent pas la difficulté de réunir une telle base qui doit réunir des conditions de terrain et d'illumination variées tout en exigeant un comportement extrêmement cohérent et prédictible de la part de l'opérateur humain et ce sur un grand nombre de trajectoires (il faut réunir près d'une centaine de milliers d'échantillons). En contrepartie de ces efforts, la technique proposée est robuste et ne nécessite aucun travail d'ingénierie au niveau des attributs, puisque la politique apprise associe directement la sortie du capteur à la consigne de l'actuateur du robot. Bien que cela soit moins problématique aujourd'hui avec l'augmentation de puissance des équipements embarqués, elle semble également plus rapide (dans l'exploitation, non dans l'apprentissage) que l'état de l'art de l'époque. Elle améliore les résultats notamment par rapport à \gls{alvinn} \citep{pomerleau1993knowledge} en ceci que la résolution des caméras peut être augmentée sans trop grande explosion du réseau grâce à l'usage de la convolution et non d'un réseau complètement connecté, et que la tâche apprise est plus difficile, il s'agit de conduire en terrain libre et non de suivre une route.

Nous venons de voir deux techniques différents permettant d'apprendre une politique à partir d'un base de données inerte, de manière supervisée, avec une intervention humaine minimale : soit l'on dispose de suffisamment de données pour qu'un apprentissage par cœur de la base corresponde à un apprentissage performant sur tout l'espace d'état, soit l'on construit des attributs (ou si l'on utilise du \gls{boosting} un espace d'hypothèse où les choisir) tels que l'apprentissage au mieux (en minimisant une fonction de coût exprimée sur les données) ne soit pas un apprentissage par cœur, mais un apprentissage généralisant sur tout l'espace d'état. Apprendre une politique de manière locale, c'est à dire en se concentrant trop sur une base de données lacunaire, n'est pas satisfaisant. Cela donne un résultat fragile, l'agent sera en effet pris au dépourvu s'il a à contrôler le système dans une configuration différente de celle sur laquelle il a été entraîné : il ne dispose ni d'information relative au comportement de l'expert dans une telle situation, ni d'information sur la tâche à accomplir qui lui permettraient de déduire ce que pourrait être ce comportement.

Brisant la contrainte de la base de données inerte, l'idée de demander ces échantillons de manière interactive a été proposée afin de minimiser la quantité de données nécessaire à l'apprentissage de la politique experte. Un exemple d'une telle approche est décrit en \citep{chernova2007confidence}. Des \gls{gmm} sont appris à partir d'une base de données experte de départ, puis l'agent applique la politique apprise tout en demandant à l'expert, lorsque l'incertitude est trop grande, de lui fournir un échantillon supplémentaire. Cette approche permet de limiter la redondance de la base d'entraînement et de guider l'échantillonnage vers les zones intéressantes de l'espace d'état, ce qui est également une solution au problème de la généralisation : quand l'agent ne sait pas généraliser, il demande à l'expert.

L'apprentissage direct de la politique experte est parfois intégré à dans un cadre plus large, où les notions de hiérarchie et de but apparaissent.

La classification par arbre de décision a été appliquée à l'apprentissage d'un plan de vol dans \citep{sammut1992learning}. L'application est impressionnante, piloter un avion, même en simulation, n'est pas une mince affaire puisqu'il fut en temps réel prendre en compte un grand nombre de facteurs pour décider d'une action parmi un éventail assez large. Les facteurs limitants de l'apprentissage automatique sont les mêmes que pour l'approche précédente : un grand nombre d'échantillons est requis (du même ordre de grandeur, de l'ordre de la centaine de milliers) et un comportement cohérent est exigé de l'expert humain (à un point tel que les démonstrations de deux experts ne peuvent être mélangées en une seule base d'entraînement). De plus, l'aspect automatique de l'approche reste limité à l'apprentissage d'une politique par phase de vol. La détection de la phase de vol courante et donc le choix de la politique de contrôle à appliquer est effectué par des règles d'origine humaine. Pour chaque phase, la politique apprise n'est robuste qu'à de petites variations dans les états rencontrés.

De fait, cette approche a été le point de départ de nombreuses améliorations. Le travail présenté par \citet{stirling1995churps} (appelé \gls{churps}) consiste a déduire un contrôleur à partir d'une description du modèle d'évolution du système et du but à atteindre. Pour automatiser la création de ces descriptions, tâche réclamant un travail difficile car nécessitant de décrire des mécanismes précis à l'aide d'un langage contraignant, \citet{bain2000framework} proposent d'utiliser les données de l'expert. Les règles complexes ainsi apprises étant ajoutées à l'espace d'action, il est possible d'apprendre de manière automatique un classifieur plus concis que celui de \citet{sammut1992learning}, et nécessitant moins de données expertes. L'architecture proposée utilise la logique du premier ordre et donc le raisonnement symbolique. Cela permet d'introduire explicitement des connaissances expertes dans le système. Ces connaissances peuvent être acquises semi-automatiquement : les prédicats sont bâtis à la main et les paramètres sont appris grâce aux données de vol comme le proposent \citet{srinivasan1998inductive}. La sémantique des symboles (ici, virage, altitude, trajectoire de vol, etc.) est très liée au problème concerné. Retrouver la puissance des techniques d'apprentissage symbolique sur un autre problème nécessite d'effectuer de nouveau le difficile travail de définition des symboles et prédicats. Un autre élément gênant est la difficulté d'exprimer la tâche à accomplir en utilisant un langage symbolique. Dans une approche hybride symbolique/automatique, \citet{shiraz1997combining} proposent à l'expert soit de décrire la tâche symboliquement, soit d'en démontrer l'exécution. Les phases les plus délicates (par exemple l'atterrissage) n'ont pu être décrites et ont été démontrées. La facilité d'exploitation des règles symboliques rentre en conflit avec la difficulté qu'il y a à les définir, à l'inverse la relative facilité de génération d'une base d'exemple se heurte à la difficulté qu'il y a à généraliser à partir de celle-ci.

Une autre approche utilise les notions de hiérarchie et de but, mais de manière quelque peu différente. Plutôt que d'utiliser la logique des prédicats, ce sont les principes de programmation impérative qui se voient assistés par l'apprentissage supervisé. Dans \cite{saunders2006teaching}, ce sont les \gls{knn} qui sont utilisés pour l'apprentissage supervisé d'une politique. Les attributs sont construits à la main à partir des valeurs de sortie des capteurs du robot, et portent une sémantique forte et explicite (distance, angle), donc pratique pour l'exploitation par un opérateur humain. Les problèmes de généralisation de l'apprentissage supervisé sont contournés par l'intégration dans un cadre beaucoup plus riche : l'opérateur humain peut élargir l'espace d'action à volonté, soit en définissant une séquence d'actions qui seront exécutées en série de manière déterministe, soit en proposant des exemples du comportement souhaité en précisant ou non un état-but correspondant à la situation dans laquelle on souhaite voir le robot une fois la politique exécutée. Ces exemples servent alors à l'apprentissage d'une politique de manière supervisée, cette politique est ajoutée en tant qu'action et son exécution pourra être déclenchée dans le cadre d'une autre politique, de niveau d'abstraction plus grand. Cette hiérarchisation des comportements permet de limiter l'effort humain, d'optimiser l'utilisation des exemples et de rapidement mettre en place des comportements complexes par la création de nouveaux niveaux d'abstraction. 

L'apprentissage supervisé est dans les approches que nous venons de citer utilisé comme sous routine d'un système beaucoup plus large, dans lequel l'expertise humaine explicite reste le moyen central permettant la généralisation des comportements.

Le principal problème de l'apprentissage direct de la politique de manière supervisé est, pour reprendre le terme de \citep{ratliff2009learning}, sa myopie. Pour compenser le fait que l'on travaille au niveau d'abstraction le plus bas, celui du choix immédiat d'une action en fonction des informations contenues dans un état transitoire, les approches que nous venons de détailler font apparaître en filigrane la notion de but : l'expert n'agit en effet pas à tâtons mais dirige le système en fonction de critères qu'il paraît difficile d'exprimer au niveau d'une simple politique réactive. On se repose donc sur une formulation plus ou moins explicite (dans le choix des attributs, dans la définition de la base d'exemple, dans l'introduction de règles logiques ou dans la définition d'une hiérarchie) de ce but, mais toujours d'origine humaine. Nous allons voir qu'il est possible de formaliser cette notion de but tout en continuant de travailler avec une politique et des échantillons semblables à ceux auxquels nous nous sommes habitués. Nous verrons par la suite que le but de l'expert, formalisé de cette manière, peut alors être automatiquement déduit d'une base d'échantillons inerte. 
# Méthode de regroupement des actions : on apprend plus une politique en la copiant mais on essaie de comprendre comment fonctionne l'expert.
# ?? Moultes autres approches, labyrinthiques, exemples ultra rapide, se référer à blip et blop pour un survey
# ^(saunders2006teaching) citation [22] semble en proposer un survey. (saunders2006teaching) en propose lui-même un bon
# L'idée est bonne, mais (problèmes liés à l'approche). Ce qu'il faudrait c'est comprendre le but de l'expert, et essayer d'isoler ça.
# FIXME: La notion de but apparâit plusieurs fois
# Trucs que je sais pas où foutre :
# saunders2006learning, sec 3 : si on observe l'expert, on a pas accès à ses sensations ni à ses ordres directement, et ils correspondent pas à ceux de l'expert. Quoiqu'en changeant l'espace d'action (tour, fou etc.) , on devrait y arriver.  #correspondance problem
# 
# Trucs que j'ai pas lu, mais qu'il faudrait peut-être lire et mettre dans ce chapitre ou ailleurs, mais dont j'espère qu'ils sont de moindre importance et que donc c'est pas grave si je n'en parle pas
# (argall2009survey) T. Inamura, M. Inaba, H. Inoue, Acquisition of probabilistic behavior decision model based on the interactive teaching method, in: Proceedings of the Ninth International Conference on Advanced Robotics, ICAR’99, 1999.
# En fait toute la section 4.1 de argall2009survey mériterait d'être explorée ici, mais c'est long et chiant et il se fait tard.
# Faudrait aussi se faner schaal et son gros survey, mais c'est vraiment mal écrit, et je pense pas que je jeu en vaille la chandelle. Il faudrait penser à le citer, cependant.
# Ya bentivegna2004learning qui sert à rien mais qu'on peut rajouter si ya besoin de parler pour ne rien dire (problème dépendant)
# ya coates2008learning qui est impressionnant mais qui rentre dans aucune case
# ya  konidaris2011cst que je sais pas où foutre
# ya  leon2011teaching que je sais pas ou ranger non plus
# Quelque part il faudrait rajouter  montana2011towards
# Et natarajan2011imitation, c'est du supervisé, ou pas ?
# J'ai l'impression de m'embarquer dans un labyrinthe sans fin, avec toujours plus de papiers à résumer. Il est impossible d'être exhaustif en si peu de temps.
# FIXME Citer les deux surveys 

** Cadre des \glspl{mdp} pour la prise de décision séquentielle
# Snippet: La classification ne se soucie pas de l'objectif de l'expert. Quid si une action mal choisie fait dérailler l'agent sur une partie totalement inconnue de l'espace d'état ?
# Goal: introduire les notions de l'AR qui sont nécessaires à la définition des notions d'ARI
# Requires:
# Ensures: trajectoire, probabilités de transition, trace sas, récompense, trace sars, trace sarsa, fonction de valeur, fonction de qualité, politique gloutonne, politique optimale, itération de la politique, itération de la valeur, dynamic programming, RL, LSPI
Pour comprendre ce but de l'expert qu'il nous importe de connaître, ce n'est pas au niveau du choix état, action que décrit la politique qu'il faut regarder, mais à un niveau d'abstraction plus grand : la dynamique que la politique de l'expert impose au système. La notion qui nous manque pour entamer le raisonnement est celle de l'effet d'une action. Nous ne nous sommes préoccupés que du choix de l'action en fonction de l'état courant sans nous soucier de ce que ce choix allait imposer comme contraintes sur le prochain état que l'agent va rencontrer. Afin de pouvoir considérer la politique de l'expert non plus comme un ensemble décousu d'associations état-action, mais comme un outil capable de produire des séquences d'actions porteuses de sens au point de vue d'un critère long terme, nous formalisons la notion de dynamique temporelle.

# ?s timeindex 't' 'Indice temporel'
# ?s timehorizon 'T' 'Horizon temporel'
# ?s naturals '\mathbb{N}' 'Entiers naturels'
L'agent (qu'il s'agisse de l'expert ou d'un agent artificiel que l'on entraîne) au manettes du système contrôle celui-ci non pas ponctuellement de temps à autres (sauf dans le cas d'un expert à qui l'on demande son avis de manière interactive comme nous venons de le voir plus haut) mais de manière cohérente sur un laps de temps durant lequel il devra opérer des actions de contrôle les unes après les autres. Il est donc naturel d'indexer ces actions et les états traversés par un indice temporel $\timeindex \in \llbracket 0;\timehorizon\rrbracket, \timehorizon\in\naturals \cup \{\infty\}$. Il est possible de prendre en charge une vision continue du temps avec quelques subtilités dont nous ne soucions pas ici, cette formalisation discrète étant suffisamment puissante pour les cas que nous souhaitons traiter. Elle n'impose par exemple pas de pas d'échantillonnage constant, il s'agit ici d'ordonner les états et actions par ordre de causalité, ce qui incidemment correspond[fn::à moins que /Doctor Who/ et /Retour vers le futur/ ne soient des documentaires.] à un indice temporel croissant, non pas de transcrire avec quelque fidélité les problèmes de l'échantillonnage temporel. Qui plus est cette formulation correspond à la réalité du contrôle numérique, intrinsèquement discret.

# ?s transprobfunc 'p' 'Probabilités de transition'
# ?cs 3 transprobfunceval 'p\left(#3|#1,#2\right)' 'p(s\prime|s,a)' 'Probabilité qu{\apos}un agent transite en $s\prime$ après avoir choisi l{\apos}action $a$ dans l{\apos}état $s$'
Pour prendre en compte les imperfections de la modélisation ou plus simplement parfois la nature réellement stochastique du problème, les effets d'une action sont décrits par une loi de probabilité, qui informée d'un état $\state_{\timeindex}$ et d'une action $\action_{\timeindex}$ prédit vers quel état $\state_{\timeindex+1}$ le système va transiter. On note cela :
\begin{equation}
\state_{\timeindex+1}\sim \transprobfunceval{\state_{\timeindex}}{\action_{\timeindex}}{\cdot}, \transprobfunc \in \twosetsfunctions{\statespace \times \actionspace \times \statespace}{[0;1]}.
\end{equation}

# ?cs 1 transprobmat 'P^{#1}' 'P^{\pi}' 'Matrice des probabilités de transition induites par la politique $\policy$'
# ?cs 3 matrixbyterm '\left({#1}\right)^{#2}_{#3}' '\left(f(i,j)\right)^{i}_{j}' 'Matrice dont l{\apos}élément ligne $i$, colonne $j$ est $f(i,j)$'
# ?cs 1 stationarydistrib '\rho^{#1}' '\rho^\pi' 'Distribution stationnaire induite par la politique $\pi$'
La répétition du cycle consistant à choisir une action puis à transiter vers un nouvel état où l'agent choisit une action qui le fera transiter vers un nouvel état etc. forme une trajectoire. Les probabilités de transitions contraintes par une politique $\policy$ peuvent être représentées par une matrice de taille $\card{\statespace}\times\card{\statespace}$ :
\begin{equation}
\transprobmat{\policy} = \matrixbyterm{\transprobfunceval{\state}{\policy(\state)}{\state'}}{\state}{\state'}.
\end{equation}
Un agent de politique $\policy$ va visiter certains états plus que d'autres, cela est quantifié par la distribution stationnaire $\stationarydistrib{\policy}$ définie telle que :
\begin{equation}
\transpose{\stationarydistrib{\policy}} \transprobmat{\policy} = \transpose{\stationarydistrib{\policy}}
\end{equation}
# ?s rewardfunc 'R' 'Fonction de récompense'
# ?cs 1 staterewardfunceval 'R\left(#1\right)' 'R(s)' 'Récompense en l{\apos}état $s$'
Dans les approches vues précédemment, le but était défini comme des valeurs spécifiques que doivent prendre certaines composantes de l'état (par exemple pour le pilotage, une certaine altitude). Il est au premier abord assez naturel de définir une consigne comme cela. Pour peu que l'espace d'état soit construit d'une manière qui permet l'analyse sémantique, l'opérateur humain n'a pas trop de mal à exprimer ce qu'il souhaite que la machine fasse en définissant quels sont les états désirables et ceux qu'il faut éviter. Charge à la machine de trouver comment se placer dans les états désirables en évitant les états problématiques. Nous formalisons cela sous la forme d'une fonction de récompense. Il s'agit d'un jugement local de l'intérêt qu'il y a à se trouver en un certain état :
\begin{equation}
\rewardfunc \in \twosetsfunctions{\statespace}{\reals}.
\end{equation}
Nous verrons par la suite qu'il est possible, sans que cela importe réellement, de définir la récompense sur les états seuls comme nous le faisons pour l'instant, ou sur des couple état-action, ou même sur des transitions état-action-état.

# ?cs 2 rlvalue 'V^{#1}_{#2}' 'V^{\pi}_R' 'Fonction de valeur pour la récompense $R$ lorsqu{\apos}on suit la politique $\pi$'
Il faut maintenant que ce critère local donne lieu à un comportement globalement intéressant. Comment, à l'échelle d'une politique choisissant une action pour un état, parvenir à un contrôle tenant compte de la dynamique complète du système ? Il faut qu'une politique $\policy$ soit jugée dans son ensemble sur la trajectoire qu'elle impose à l'agent. Mathématiquement nous souhaitons optimiser la valeur de la politique :
\begin{eqnarray}
\label{eq:Vdefsum}
\rlvalue{\policy}{\rewardfunc}(\state)&=&\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\staterewardfunceval{\state_{\timeindex}}}{\state_0 = s}\\
\textrm{avec }\forall \timeindex \in \llbracket 1;T\rrbracket, \state_{\timeindex} &\sim& \transprobfunceval{\state_{\timeindex-1}}{\policy(\state_{\timeindex-1})}{\cdot}.
\end{eqnarray}
# ?s discount '\gamma' 'Facteur d{\apos}amortissement'
Comme l'horizon $\timehorizon$ est potentiellement infini, pour s'assurer de la convergence de la somme, le facteur d'amortissement $\discount \in [0;1[$ est introduit.

# ?s mdpbis '\mathcal{M}' 'Un \gls{mdp}'
L'ensemble de l'espace d'état $\statespace$, de l'espace d'action $\actionspace$, des probabilités de transitions $\transprobfunc$, de la fonction de récompense $\rewardfunc$ et du facteur d'amortissement $\discount$ forment un \gls{mdp} $\mdpbis$ \citep{puterman1994markov}
\begin{equation}
\mdpbis = \left\{\statespace, \actionspace, \transprobfunc, \rewardfunc, \discount\right\}
\end{equation}
dans lequel le problème de la prise de décision séquentielle pour le contrôle optimal peut être formulé.

# ?cs 1 optimalpolicy '\pi^*_{#1}''\pi^*_R' 'Une politique optimale pour la fonction de récompense $R$'
Nous recherchons une politique optimale $\optimalpolicy{\rewardfunc}$ telle qu'en tout état sa valeur soit supérieure ou égale à celle de tout autre politique $\pi$ :
\begin{equation}
\forall \state, \rlvalue{\optimalpolicy{\rewardfunc}}{\rewardfunc}(\state) \geq \rlvalue{\policy}{\rewardfunc}(\state).
\label{eq:optimalite}
\end{equation}
Pour résoudre ce problème, intéressons nous de plus près à l'expression de la valeur d'une politique, dont la définition qu'on en a donné $\eqref{eq:Vdefsum}$ peut être transformée en une expression récursive :
\begin{equation}
\label{eq:BellmanEval}
\rlvalue{\policy}{\rewardfunc}(\state) = \staterewardfunceval{\state} + \discount \sum_{\state'\in \statespace}\transprobfunceval{\state}{\policy(\state)}{\state'} \rlvalue{\policy}{\rewardfunc}(\state').
\end{equation}
# ?cs 3 bellmanevalopeval 'B^{#1}_{#2}{#3}' 'B^{\pi}_{R}' 'Opérateur d{\apos}évaluation de Bellman'
C'est l'équation d'évaluation de \citet{bellman2003dynamic} qui est à l'origine de l'opérateur d'évaluation de Bellman :
\begin{eqnarray}
\bellmanevalopeval{\policy}{\rewardfunc}{} &\in& \twosetsfunctions{\twosetsfunctions{\statespace}{\reals}}{\twosetsfunctions{\statespace}{\reals}}\\
\forall V \in \twosetsfunctions{\statespace}{\reals}, \bellmanevalopeval{\policy}{\rewardfunc}{V} &=& R + \discount \sum_{\cdot\in \statespace}\transprobfunceval{\state}{\policy(\state)}{\cdot} V. 
\end{eqnarray}

Cette opérateur est contractant, par conséquence il possède un point fixe, qui est unique. L'équation de définition de ce point fixe :
\begin{equation}
V = \bellmanevalopeval{\policy}{\rewardfunc}{V}
\end{equation}
est exactement la même que l'équation d'évaluation de Bellman \eqref{eq:BellmanEval}. L'unique point fixe de l'opérateur $\bellmanevalopeval{\policy}{\rewardfunc}{}$ est donc la fonction de valeur de la politique : $\rlvalue{\policy}{\rewardfunc}$. La famille d'algorithmes dits d'itération de la valeur appliquent d'ailleurs de manière répétée l'opérateur d'évaluation de Bellman (ou une version approchée de cet opérateur) à une valeur de départ pour obtenir la valeur d'une politique.

# ?cs 2 quality 'Q^{#1}_{#2}' 'Q^{\pi}_{R}' 'Fonction de qualité de la politique $\pi$ pour la récompense $R$'
Dans l'équation de Bellman \eqref{eq:BellmanEval}, l'action qui fait passer de $\state$ à $\state'$ est explicitement donnée comme étant $\policy(\state)$. Les actions suivantes sont également choisies par la politique $\policy$ comme l'indique le terme $\rlvalue{{\color{red}\policy}}{\rewardfunc}$. Imaginons maintenant que connaissant la valeur d'une politique $\policy$, nous soyons chargé pour l'état $\state$ de choisir la meilleur action $\action$, qui peut être différente de $\policy(\state)$, mais qu'ensuite la politique $\policy$ reprenne le contrôle. C'est le degré de liberté décrit par la fonction de qualité $\quality{\policy}{\rewardfunc}$ :
\begin{eqnarray}
\quality{\policy}{\rewardfunc} &\in& \twosetsfunctions{\statespace \times \actionspace}{\reals}\\
\quality{\policy}{\rewardfunc}(\state,\action) &=& \staterewardfunceval{\state} + \discount \sum_{\state'\in \statespace}\transprobfunceval{\state}{\action}{\state'} \rlvalue{\policy}{\rewardfunc}(\state').
\end{eqnarray}
Notre meilleur choix consisterait à maximiser la fonction de qualité, c'est à dire à rendre le contrôle à $\policy$ dans l'état $\state'$ dans lequel sa valeur est maximale. En effectuant ce choix sur chacun des états de $\statespace$, l'on définit une politique gloutonne :
\begin{equation}
greedy(\policy): \state\rightarrow \arg\max_{\action\in\actionspace}\quality{\policy}{\rewardfunc}(\state,\action). 
\end{equation}
# ?cs 2 bellmanoptopeval 'B^{*}_{#1}{#2}' 'B^{*}_{R}' 'Opérateur d{\apos}optimalité de Bellman'
Cette agglomération de choix localement optimisés permet un optimisation beaucoup plus générale. La politique gloutonne que nous venons de définir est le meilleur choix pour un problème d'optimisation plus large :
\begin{equation}
greedy(\policy) = \max_{\policy'}\bellmanevalopeval{\policy'}{\rewardfunc}{\rlvalue{\policy}{\rewardfunc}}.
\end{equation}
L'opérateur associé :
\begin{equation}
\bellmanoptopeval{\rewardfunc}{V} = \max_{\policy}\bellmanevalopeval{\policy}{\rewardfunc}{V}
\end{equation}
est l'opérateur d'optimalité de Bellman. Contractant lui aussi, il admet donc un unique point fixe qui se trouve être la fonction de valeur optimale $\rlvalue{\optimalpolicy{\rewardfunc}}{\rewardfunc}$. Toute politique gloutonne vis à vis de la politique associée est également une politique optimale. Ainsi :
\begin{eqnarray}
\optimalpolicy{\rewardfunc} &\in& greedy(\optimalpolicy{\rewardfunc})\\
\forall \state \in \statespace, \optimalpolicy{\rewardfunc}(\state) &\in& \arg\max_{\action\in \actionspace}\quality{\optimalpolicy{\rewardfunc}}{\rewardfunc}(\state,\action).
\end{eqnarray}
Les algorithmes d'itération de la politique appliquent de manière répétée l'opérateur d'optimalité de Bellman (ou une version approchée) à une politique de départ afin d'accéder à la politique optimale.

Il est intéressant de noter que grâce à la fonction de valeur, l'optimisation "myope" à l'échelle du choix d'une action pour un état mène à une optimisation à l'échelle de l'espace d'état complet, au niveau de la politique. Grâce à la prise en compte des probabilités de transitions, la fonction de valeur fait le lien entre le court et le long terme.

Lorsque les probabilités de transitions sont connues sur un espace d'état fini, on peut de manière exacte résoudre le problème du contrôle optimal grâce à la \gls{dp} \citep{bertsekas2001dynamic}. Les choses se corsent lorsque ces probabilités de transition sont inconnues ou que les algorithmes de \gls{dp} deviennent non tractables. Il faut alors avoir recours à l'\gls{rl} \citep{sutton1998reinforcement}. L'\gls{rl} permet, par interactions répétées avec le système, d'apprendre à contrôler celui-ci. Les probabilités de transition étant souvent difficiles à exprimer, nous allons porter notre attention sur l'\gls{rl} plus particulièrement que sur la \gls{dp}.

# ?s paramrl '\xi' 'Vecteur de paramètres pour l{\apos}AR'
# ?cs 1 appr '\hat{#1}' '\hat X' 'Approximation de $X$ à partir de données'
Un schéma classique en \gls{rl} est celui de l'approximation linéaire de la fonction de valeur[fn::On utilise parfois le terme de fonction de valeur indistinctement pour la fonction de valeur et la fonction de qualité]. On réduit alors le problème du contrôle optimal au choix du vecteur de paramètres $\paramrl$ donnant la meilleure approximation de la fonction de qualité optimale :
\begin{equation}
\appr{\quality{\optimalpolicy{\rewardfunc}}{\rewardfunc}}(\state,\action) = \transpose{\paramrl}\featurestateactionfunc(\state, \action).
\end{equation}
Comme pour la classification, le choix de l'espace $\featurestateactionspace$ n'est pas anodin car de son choix va en grande partie dépendre la qualité du contrôle.

Pour apprendre le vecteur de paramètres $\paramrl$, l'algorithme \gls{lspi} de \citet{lagoudakis2003least} n'a besoin que d'une base de données inertes. Il ne s'agit pas exactement d'une base $\satrace{}$ comme la classification en utilise, mais d'une base à peine plus contraignante à réunir, qui contient l'état suivant l'action (afin d'obtenir de l'information sur la dynamique du système) et le signal de récompense (afin d'obtenir de l'information sur la qualité du contrôle) :
# ?cs 1 sasrtrace 'D_{sasr}^{#1}' 'D_{sasr}^{\rewardfunc}' 'Trace de type $s,a,s\prime,r$'
\begin{equation}
\sasrtrace{\rewardfunc} = \{(\state_{\datasetindex},\action_{\datasetindex}, \state'_{\datasetindex}, r_{\datasetindex} = \rewardfunc(\state_{\datasetindex})) | \datasetindex \in \llbracket 0;\nbsamples-1\rrbracket\}.
\end{equation}

Les échantillons de $\sasrtrace{\rewardfunc}$ n'ont pas besoin de se suivre, on peut avoir $\state_{\datasetindex+1} \neq \state'_{\datasetindex}$. Il n'y a pas non plus en théorie de contrainte sur $\action_{\datasetindex}$, mais cet algorithme est parfois de convergence capricieuse, et il importe que la base d'échantillons qui lui est fournie soit représentative de la dynamique du \gls{mdp} pour chaque action. Une technique pratique et de réunir plusieurs trajectoires d'une politique aléatoire, en la faisant démarrer de différents états.

Nous voilà donc armés pour résoudre (de manière approchée) le problème du contrôle optimal, pour peu que l'on dispose d'une description de la tâche à accomplir sous la forme d'une fonction de récompense $\rewardfunc$ et d'échantillons représentatifs du problème.
# Probabilités de transitions, fonction de récompense, fonction de valeur, po- litique optimale. Programmation Dynamique (PD).
# Approximation de la fonction de valeur, AR. L’AR permettant d’apprendre le contrôle par interaction avec le système, il possède quelques avantages sur le PD, comme la possibilité de s’adapter à un milieu changeant pour certains algorithmes ou de manière plus générale l’absence de besoin de connaître les probabilités de transition.
# Pour appliquer l’AR au monde réel, il est nécessaire d’exploiter efficacement les échantillons. Les échantillons sont très faciles à obtenir si on dispose d’un simulateur, et sont les seules données accessible sur certains systèmes. Pouvoir les exploiter en batch et off-policy permet de contrôler beaucoup de types de systèmes différents (qui peut le plus peut le moins). Least Square Policy Iteration (LSPI) Lagoudakis and Parr [2003].
** Définition de l'\gls{irl} 
*** Définition du problème 
La question qui se pose maintenant est de savoir dans quelle mesure il est possible d'automatiquement déduire d'une trace du comportement de l'expert une description de son but sous la forme d'une fonction de récompense. Cette méthode d'imitation a été suggérée pour la première fois par \citet{russell1998learning}. L'état de l'art sera traité au chapitre suivant, nous nous attelons ici à trouver une formulation mathématique saine du problème et à introduire les notions nécessaires à l'analyse des méthodes existantes et à l'introduction des nouvelles approches que nous proposons.

Outre l'intérêt intrinsèque de la découverte des motivations de l'expert (\ref{hier-intrinseque}), apprendre une fonction de récompense correspondant au comportement de l'expert permet de soigner les méthodes d'imitation de leur "myopie" (\ref{hier-myopie}), en guidant l'agent vers une imitation non pas du /comment/, comme le fait l'imitation directe de la politique, mais du /quoi/.

# ?s expertreward 'R^E' 'Récompense inconnue optimisée par l{\apos}expert'
Dans le formalisme des \gls{mdp} introduit plus tôt, l'expression du problème de l'\gls{irl} est de prime abord simple : l'on suppose que la politique de l'expert $\expertpolicy$ est une politique optimale pour une certaine fonction de récompense $\expertreward$ qu'il s'agit de trouver.
Les choses se corsent malheureusement extrêmement rapidement. Tout d'abord, cette formulation n'est pas un problème mathématique bien posé au sens d'\citet{hadamard1902problemes} : il existe en effet de multiples solutions, dont l'une est dégénérée, la récompense uniformément nulle. Tous les comportements (donc celui de l'expert) ont la même valeur ($0$) pour cette récompense, donc tous sont optimaux. En inversant, la politique de l'expert est optimale pour la récompense nulle, qui est donc solution du problème.

Plus subtilement, utiliser le formalisme des \gls{mdp} présuppose que certaines conditions sont réunies, notamment en ce qui concerne les espaces d'état et d'action. Il faut être en mesure de définir un espace d'état markovien, afin qu'un agent puisse prendre sa décision quant à l'action en se basant uniquement sur les informations de l'état. Il faut également être en mesure d'obtenir une trace de l'expert (le problème se pose déjà pour l'imitation directe de la politique, nous le mentionnons brièvement en \ref{hier-general}). La tâche à accomplir doit pouvoir se mettre sous la forme d'une fonction de l'espace d'état (ce n'est pas parce qu'on peut décrire une politique sur un espace d'état que l'on peut y décrire la tâche à accomplir). L'espace d'action doit rester discret et de faible cardinal si l'on veut que l'immense majorité des approches d'\gls{irl} y restent tractables. Enfin, il faut que l'expert soit effectivement optimal, l'introduction d'erreurs dans la démonstration pouvant poser problème.

# ?s expertdistribution '\rho^E' 'Distribution stationnaire de l{\apos}expert'
Ces conditions, dont la réunion n'est certes pas triviale, ne vont cependant pas nous préoccuper. Nous nous attelons à trouver de nouvelles solutions aux problème formulé par \citet{russell1998learning}. Pour mesurer notre succès, nous envisageons deux mesures de la qualité de la récompense $\appr{\rewardfunc}$ trouvée par un algorithme d'\gls{irl}. L'une est objective ($\expertdistribution$ est la distribution stationnaire de l'expert) :
\begin{equation}
\expectationknowing{\rlvalue{\expertpolicy}{\expertreward}(\state) - \rlvalue{\optimalpolicy{\appr{\rewardfunc}}}{\expertreward}(\state)}{\state\sim\expertdistribution},
\end{equation}
l'autre est calculable :
\begin{equation}
\expectationknowing{\rlvalue{\optimalpolicy{\appr{\rewardfunc}}}{\appr{\rewardfunc}}(\state) - \rlvalue{\expertpolicy}{\appr{\rewardfunc}}(\state)}{\state \sim \expertdistribution}.
\end{equation}

Ces deux critères sont positifs ou au mieux nuls, il s'agit de les minimiser. Le terme de gauche est une fonction de valeur optimale (puisque $\expertpolicy$ est optimale pour $\expertreward$ et que $\optimalpolicy{\appr{\rewardfunc}}$ est optimale pour $\appr{\rewardfunc}$). Ces deux critères sont donc liés à l'optimalité de la valeur de droite et tendront vers $0$ quand, pour le premier la politique apprise en optimisant la récompense $\appr{\rewardfunc}$ sera optimale pour la récompense inconnue $\expertreward$ et quand pour le second la récompense $\appr{\rewardfunc}$ est telle qu'elle admet la politique expert comme politique optimale.

Le premier critère est celui qui nous intéresse vraiment. Il juge le comportement issu de l'optimisation par un algorithme d'\gls{rl} ou de \gls{dp} de la récompense $\appr{\rewardfunc}$ à l'aune de la description de la tâche confiée à l'expert, à savoir $\expertreward$. Cela permet dans les cas où plusieurs bonnes solutions existent de ne pas pénaliser un agent qui aurait fait un choix différent de celui de l'expert si cela importe peu. Il s'agit donc d'une mesure plus fine que l'erreur de classification $\classiferror{\expertdistribution}$, qui sanctionne toute divergence d'opinion avec l'expert. Lors du test d'algorithmes de \gls{irl} sur des problèmes jouets où la récompense $\expertreward$ nous est connue, nous étudierons ce critère ou un critère équivalent. Sur de vrais problèmes, en revanche, il est impossible de l'estimer : il faut résoudre le problème de l'\gls{irl} pour savoir si on a bien résolu le problème de l'\gls{irl}.

Le second critère a le gros défaut d'être optimisé par la récompense nulle. Nous verrons cependant en analysant les différentes approches d'\gls{irl} les mécanismes mis en place afin d'éviter les solutions dégénérées. Il a le gros avantage de pouvoir être estimé puisqu'à l'inverse de $\expertreward$, la fonction de récompense $\appr{\rewardfunc}$ est connue. Un algorithme comme \gls{lstd} \citep{bradtke1996linear,boyan2002technical} peut fournir une approximation \gls{offpolicy} d'une fonction de valeur.
*** Attribut moyen 
# ?s paramirl '\theta' 'Vecteur de paramètres pour l{\apos}ARI'
    Le fonction de récompense étant l'objet recherché celle-ci sera, pour ne pas bouder une méthode éprouvée, approximée par un schéma linéaire :
    \begin{eqnarray}
    \appr{\rewardfunc}(\state) &=& \transpose{\paramirl}\featurestatefunc(\state)\\
    \textrm{ou } \appr{\rewardfunc}(\state,\action) &=& \transpose{\paramirl}\featurestateactionfunc(\state,\action).
    \end{eqnarray}
Là encore, le choix des attributs est important. Il faut qu'ils permettent à la fonction de récompense de décrire la tâche effectuée par l'expert.

# ?cs 1 rlmu '\mu^{#1}' '\mu^{\pi}' 'Attribut moyen de la politique $\pi$'
Dans le contexte de l'approximation linéaire de la fonction de récompense, l'expression de la fonction de valeur d'une politique $\policy$ fait apparaître un terme $\rlmu{\policy}$ dont le prochain chapitre révèlera l'importance :
\begin{eqnarray}
\label{eq:mudef}
\textrm{avec }\forall \timeindex \in \llbracket 1;T\rrbracket, \state_{\timeindex} &\sim& \transprobfunceval{\state_{\timeindex-1}}{\policy(\state_{\timeindex-1})}{\cdot},\\
\rlvalue{\policy}{\appr{\rewardfunc}}(\state)&=&\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\appr{\rewardfunc}(\state_{\timeindex})}{\state_0=s}\\
&=&\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\transpose{\paramirl}\featurestatefunc(\state_{\timeindex})}{\state_0=s}\\
&=&\transpose{\paramirl}\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\featurestatefunc(\state_{\timeindex})}{\state_0=s}\\
&=&\transpose{\paramirl}\rlmu{\policy}(\state)
\label{eq:vthetamu}
\end{eqnarray}

Ce terme, l'attribut moyen d'une politique, est une fonction vectorielle qui porte la structure temporelle du MDP contraint par la politique. C'est, que l'on me pardonne l'oxymore, une trace du futur qui est liée à la distribution qu'occupera l'agent à partir d'un certain état. La présence du facteur d'amortissement $\discount$ dans l'expression empêche l'identification complète à une distribution, ce qui est heureux car sans cela l'expression tendrait vers la distribution stationnaire quel que soit l'état de départ, à moins que l'horizon $\timehorizon$ ne soit fini.

De la même manière que la fonction de qualité donne à la fonction de valeur un degré de liberté supplémentaire, il est possible de donner une action en argument à l'attribut moyen avec le même effet :
\begin{eqnarray}
\textrm{avec }\forall \timeindex \in \llbracket 1;T\rrbracket, \state_{\timeindex} &\sim& \transprobfunceval{\state_{\timeindex-1}}{\policy(\state_{\timeindex-1})}{\cdot},\\
\rlmu{\policy}(\state)&=&\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\featurestatefunc(\state_{\timeindex})}{\state_0 = \state}\\
\textrm{avec }\forall \timeindex \in \llbracket 2;T\rrbracket, \state_{\timeindex} &\sim& \transprobfunceval{\state_{\timeindex-1}}{\policy(\state_{\timeindex-1})}{\cdot},\\
\textrm{et }\state_{1} &\sim& \transprobfunceval{\state_{0}}{\action}{\cdot},\\
\rlmu{\policy}(\state,\action)&=&\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\featurestatefunc(\state_{\timeindex})}{\state_0 = \state}.
\end{eqnarray}
Si la récompense est définie sur les couples état-action plutôt que sur les états seuls, alors l'expression de l'attribut moyen devient simplement :
\begin{equation}
\rlmu{\policy}(\state)=\expectationknowing{\sum\limits_{\timeindex = 0}^{\timehorizon} \discount^{\timeindex}\featurestateactionfunc\left(\state_{\timeindex},\policy(\state_{\timeindex})\right)}{\state_0 = \state}.
\end{equation}

# ?s expertmu '\mu^E' 'Attribut moyen de l{\apos}expert'
L'attribut moyen donne une idée des états que traversera l'agent. Il contient donc des informations sur la dynamique induite par sa politique. Cela va avoir un impact important sur la qualité des diverses approximations linéaires dont nous avons parlé si l'attribut moyen est utilisé en tant qu'attribut tout court. La présence de la dynamique du \gls{mdp} dans l'attribut moyen est illustrée \ref{fig:mountain_car_mu}.

# snippet illustration mountain car : la forme en escargot est caractéristique elle correspond à des va-et-vient dont l'apogée est de plus en plus haute.
#    Deux politiques ayant des attributs moyens similaires auront des valeurs similaires quelle que soit la récompense (exprimée dans le schéma d'approximation linéaire) considérée. En revanche, il est possible d'avoir deux attributs moyens complètement différents et d'avoir la même valeur vis à vis de la "vraie" fonction de récompense (illustration sur le \gls{gridworld}, passage en haut à gauche et passage en bas à droite).
# ?cs 2 norm '\left|\left|{#2}\right|\right|_{#1}' '||\cdot||_x' 'Norme $x$' 
Une propriété immédiate de l'attribut moyen est exploitée par une classe d'algorithme d'\gls{irl} (que nous décrirons plus en détail en \ref{hier:repetee}). Cette propriété découle directement de la définition de l'attribut moyen :
\begin{proposition}
\label{thm:closemuclosev}
Soit $\policy_1$ et $\policy_2$ deux politiques sur un même \gls{mdp}, dont les attributs moyens respectifs $\rlmu{\policy_1}$ et $\rlmu{\policy_2}$ sont proches (pour une certaine norme $\norm{x}{\cdot}$) :
\begin{equation}
\norm{x}{\rlmu{\policy_1}-\rlmu{\policy_2}} \leq \epsilon \in \reals.
\end{equation}
Alors quelque soit la récompense $\rewardfunc_{\paramirl} = \transpose{\paramirl}\featurestatefunc$, les valeurs des deux politiques $\policy_1$ et $\policy_2$ sont également "proches" :
\begin{equation}
\norm{x}{\rlvalue{\policy_1}{\rewardfunc_{\paramirl}}-\rlvalue{\policy_2}{\rewardfunc_{\paramirl}}} \leq \norm{x}{\paramirl}\epsilon.
\end{equation}
\end{proposition}
\begin{proof}
D'après \eqref{eq:vthetamu} : 
\begin{eqnarray}
\norm{x}{\rlvalue{\policy_1}{\rewardfunc_{\paramirl}}-\rlvalue{\policy_2}{\rewardfunc_{\paramirl}}} &=& \norm{x}{\transpose{\paramirl}\rlmu{\policy_1}-\transpose{\paramirl}\rlmu{\policy_1}}\\
&=& \norm{x}{\transpose{\paramirl}(\rlmu{\policy_1}-\rlmu{\policy_1})}.\\
\end{eqnarray}
En utilisant l'inégalité de Cauchy-Schwartz, on conclut : 
\begin{eqnarray}
\norm{x}{\rlvalue{\policy_1}{\rewardfunc_{\paramirl}}-\rlvalue{\policy_2}{\rewardfunc_{\paramirl}}} &\leq& \norm{x}{\paramirl}\norm{x}{\rlmu{\policy_1}-\rlmu{\policy_1}}\\
&\leq& \norm{x}{\paramirl}\epsilon.
\end{eqnarray}
\end{proof}
Ce résultat est assez intuitif, si deux politiques induisent les mêmes trajectoires, elles auront même valeur. L'imitation telle que résolue par l'apprentissage supervisé donne ce type de résultats. Il est intéressant de noter que dans certains cas la réciproque est fausse FIXME:illustrer ça. Il est donc théoriquement possible de résoudre le problème de l'\gls{irl} en s'éloignant des solutions que l'apprentissage supervisé peut proposer. Il est en effet possible d'imaginer qu'un algorithme d'\gls{irl} renvoie une récompense qui, une fois optimisée, donnera une politique d'attribut moyen différent de celui de la politique de l'expert, mais de valeur semblable.

\begin{figure}
\begin{tikzpicture}[scale=2]
%\draw [help lines] (0,0) grid (6,-6);
\node at (0,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_42}};
\node at (0,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_35}};
\node at (0,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_28}};
\node at (0,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_21}};
\node at (0,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_14}};
\node at (0,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_7}};
\node at (0,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_0}};

\node at (1,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_43}};
\node at (1,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_36}};
\node at (1,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_29}};
\node at (1,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_22}};
\node at (1,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_15}};
\node at (1,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_8}};
\node at (1,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_1}};

\node at (2,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_44}};
\node at (2,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_37}};
\node at (2,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_30}};
\node at (2,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_23}};
\node at (2,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_16}};
\node at (2,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_9}};
\node at (2,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_2}};

\node at (3,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_45}};
\node at (3,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_38}};
\node at (3,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_31}};
\node at (3,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_24}};
\node at (3,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_17}};
\node at (3,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_10}};
\node at (3,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_3}};
									      
\node at (4,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_46}};
\node at (4,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_39}};
\node at (4,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_32}};
\node at (4,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_25}};
\node at (4,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_18}};
\node at (4,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_11}};
\node at (4,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_4}};
									      
\node at (5,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_47}};
\node at (5,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_40}};
\node at (5,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_33}};
\node at (5,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_26}};
\node at (5,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_19}};
\node at (5,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_12}};
\node at (5,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_5}};

\node at (6,-0) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_48}};
\node at (6,-1) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_41}};
\node at (6,-2) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_34}};
\node at (6,-3) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_27}};
\node at (6,-4) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_20}};
\node at (6,-5) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_13}};
\node at (6,-6) {\includegraphics[width=.20\textwidth]{Figures/Mountain_car_mu_6}};

\end{tikzpicture}
\caption{\`A comparer à \ref{fig:mountain_car_psi}, l'attribut moyen (ici celui de l'expert sur le \gls{mountaincar}) est un reflet de la dynamique du système contraint par la politique. La forme en escargot, caractéristique de trajectoires en va-et-vient à l'apogée de plus en plus haute, a clairement laissé sa trace sur l'attribut moyen. Comme un vecteur de dimension $\dimpsi=50$ est difficile à représenter, c'est ici la projection $\transpose{\expertmu} \featurestatefunc(\cdot)$ qui est dessinée, évaluée en chacun des centres des gaussiennes de l'attribut $\featurestatefunc$.}
\label{fig:mountain_car_mu}
\end{figure}


* État de l'art et problématique
  Avant d'analyser les approches existantes d'\gls{irl}, intéressons nous plus en détail à la définition précise de la fonction de récompense, dont nous avons mentionné plus haut qu'il était possible de la définir sur l'espace d'état, sur l'espace d'état-action ou même sur l'espace d'état-action-état, mais sans nous montrer plus spécifiques. Nous verrons ensuite quelles transformations il est possible d'y appliquer sans changer les politiques optimales, une technique connue sous le nom de \gls{rewardshaping}. 
** Fonction de récompense 
   
   Une fonction de récompense sur les états seuls quantifie de manière locale la désirabilité d'un état. Ce sont les fonctions de valeur et de qualité qui vont propager ce signal d'après la dynamique et vont faire intervenir les actions dans l'expression de la qualité du contrôle. Une récompense sur l'espace état-action pose dès le niveau local un jugement sur la pertinence d'une action dans un certain état. Dans notre exemple du \gls{mountaincar}, cela permettrait par exemple de décrire que les actions actives (droite et gauche, par opposition au neutre) consomment du carburant et donc ont une récompense associée négative pour tenir compte de cette consommation et la minimiser, tout en accomplissant la tâche. Nous allons voir que la différence entre ces deux manières de voir la récompense peut être comblée formellement au prix d'une augmentation de l'espace d'état. Dès lors nous ne ferons pas par la suite de différence entre les récompenses sur les états ou sur les couples état-action, et utiliserons la formulation la plus pratique pour l'expositon de l'algorithme d'\gls{irl} concerné. Pour poursuivre avec notre exemple du \gls{mountaincar}, la méthode proposée revient à introduire dans l'état la jauge de carburant et de conserver une récompense sur les état seuls. On obtient le même contrôle optimal qu'avec la récompense écologique sur l'espace d'état-action.

\begin{proposition}
Soit $\mdpbis = \left\{\statespace, \actionspace, \transprobfunc, \rewardfunc, \discount\right\}$ un \gls{mdp} dont la récompense est définie sur l'espace état-action-état :
\begin{eqnarray}
R &\in& \twosetsfunctions{\statespace \times \actionspace \times \statespace}{\reals}\\
 R( \state_t,\action_t,\state_{t+1}) &=& R_{\statespace}(\state_t) + R_{\statespace \times \actionspace \times \statespace}( \state_t,\action_t,\state_{t+1})
\end{eqnarray}
Soit $\mdpbis' = \left\{\statespace', \actionspace, \transprobfunc', \rewardfunc', \discount\right\}$ le \gls{mdp} augmenté dont l'espace d'état est le même que pour $\mdpbis$, à une composante $\component{\state}{\dimstate+1}$ près. Les probabilités de transitions $\transprobfunc'$ sont définies par :
\begin{multline}
\forall \state'_{t} = \begin{pmatrix}s_t\in \statespace \\s_{t}^{d_{\statespace}+1}\end{pmatrix},\action_t,\state'_{t+1} = \begin{pmatrix}s_{t+1}\in \statespace \\s_{t+1}^{\dimstate+1}\end{pmatrix} \in \statespace'\times \actionspace\times \statespace'\\ \transprobfunc'\left(\state'_{t+1}|\state'_{t},\action_{t}\right) = \begin{cases}
\transprobfunceval{\state_t}{\action_t}{\state_{t+1}}& \textrm{si }\component{\state}{\dimstate+1} = {1\over \discount}R_{\statespace \times \actionspace \times \statespace}( \state_t,\action_t,\state_{t+1})\\
0 &\textrm{sinon.}
\end{cases}
\end{multline}
La fonction de récompense $\rewardfunc'$ est définie sur les états seuls. Elle vaut :
\begin{equation}
\rewardfunc'\left(\state'_{\timeindex} = \begin{pmatrix}\state_{\timeindex}\\\component{\state}{\dimstate+1}_{\timeindex} \end{pmatrix}\right) = \rewardfunc_{\statespace}(\state_{\timeindex}) +  \component{\state}{\dimstate+1}_{\timeindex}
\end{equation}
Considérant naturellement qu'une politique définie sur $\mdpbis$ l'est aussi sur $\mdpbis'$ en n'utilisant que les $\dimstate$ premières composantes de l'espace d'état (donc les composantes communes à $\statespace$ et $\statespace'$), on a alors le résultat suivant :
\begin{equation}
\forall \policy \in \twosetsfunctions{\statespace}{\actionspace} \subset \twosetsfunctions{\statespace'}{\actionspace}, \rlvalue{\policy}{\rewardfunc} = \rlvalue{\policy}{\rewardfunc'}.
\end{equation}
Toute politique définie dans $\mdpbis$ ayant la même valeur dans $\mdpbis$ que dans $\mdpbis'$, un corollaire immédiat est que chacune des politiques optimales pour $\mdpbis$ est optimale dans $\mdpbis'$. On peut ainsi travailler indifféremment avec des récompenses sur les états seuls, sur les couples état-action ou sur des triplets état-action-état sans perte de généralité, pour peu que l'espace d'état soit correctement défini.
\end{proposition} 
\begin{proof}
Pour peu que l'on convienne que la composante supplémentaire dans $\statespace'$ d'un état de départ $s_0$ est nulle, et que l'on augmente l'horizon d'un pas de temps dans $\mdpbis'$ avec une récompense sur les états seuls nulle :
\begin{eqnarray}
\component{\state}{\dimstate+1}_{0} &=& 0,\\
\rewardfunc_{\statespace}(\state_{\timehorizon+1}) &=& 0,
\end{eqnarray}
la démonstration de ce résultat se déroule assez simplement (on ne note pas l'espérance, qui devrait apparaître à chaque ligne sauf la dernière):
\begin{eqnarray}
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0}\right) &=& \sum\limits_{\timeindex = 0}^{\timehorizon+1} \discount^{\timeindex}\rewardfunc'(\state'_{\timeindex})\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=& \discount^{0}\rewardfunc'(\state'_{0}) + \sum\limits_{\timeindex = 1}^{\timehorizon} \discount^{\timeindex}\rewardfunc'(\state'_{\timeindex}) + \discount^{\timehorizon+1}\rewardfunc'(\state'_{\timehorizon+1})\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=& \rewardfunc_{\statespace}(\state_{0}) + \component{\state}{\dimstate+1}_{0} + \sum\limits_{\timeindex = 1}^{\timehorizon} \discount^{\timeindex}\left(\rewardfunc_{\statespace}(\state_{\timeindex}) + \component{\state}{\dimstate+1}_{\timeindex} \right) +  \discount^{\timehorizon+1}(\rewardfunc_{\statespace}(\state_{\timehorizon+1}) + \component{\state}{\dimstate+1}_{\timehorizon+1})\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=& \rewardfunc_{\statespace}(\state_{0}) + \sum\limits_{\timeindex = 1}^{\timehorizon}\discount^{\timeindex}\rewardfunc_{\statespace}(\state_{\timeindex}) + \sum\limits_{\timeindex = 1}^{\timehorizon}\discount^{\timeindex}\component{\state}{\dimstate+1}_{\timeindex} +  \discount^{\timehorizon+1} \component{\state}{\dimstate+1}_{\timehorizon+1}\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=& \sum\limits_{\timeindex = 0}^{\timehorizon}\discount^{\timeindex}\rewardfunc_{\statespace}(\state_{\timeindex}) + \sum\limits_{\timeindex = 1}^{\timehorizon+1}\discount^{\timeindex}\component{\state}{\dimstate+1}_{\timeindex}\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=&  \sum\limits_{\timeindex = 0}^{\timehorizon}\discount^{\timeindex}\rewardfunc_{\statespace}(\state_{\timeindex}) + \sum\limits_{\timeindex = 1}^{\timehorizon+1}\discount^{\timeindex}{1\over \discount}\rewardfunc_{\statespace \times \actionspace \times \statespace}(\state_{t-1},\action_{t-1},\state_{t})\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=&  \sum\limits_{\timeindex = 0}^{\timehorizon}\discount^{\timeindex}\rewardfunc_{\statespace}(\state_{\timeindex}) + \sum\limits_{\timeindex = 1}^{\timehorizon+1}\discount^{\timeindex-1}\rewardfunc_{\statespace \times \actionspace \times \statespace}(\state_{t-1},\action_{t-1},\state_{t})\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=&  \sum\limits_{\timeindex = 0}^{\timehorizon}\discount^{\timeindex}\rewardfunc_{\statespace}(\state_{\timeindex}) + \sum\limits_{\timeindex = 0}^{\timehorizon}\discount^{\timeindex}\rewardfunc_{\statespace \times \actionspace \times \statespace}(\state_{t},\action_{t},\state_{t+1})\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=&  \sum\limits_{\timeindex = 0}^{\timehorizon}\discount^{\timeindex}\left(\rewardfunc_{\statespace}(\state_{\timeindex}) + \rewardfunc_{\statespace \times \actionspace \times \statespace}(\state_{t},\action_{t},\state_{t+1})\right)\\
\rlvalue{\policy}{\rewardfunc'}\left(\state'_{0} \right) &=& \rlvalue{\policy}{\rewardfunc}(\state_0)
\end{eqnarray}
\end{proof}

Nous savons maintenant formellement que l'imprécision que nous avons laissé flotter sur la définition de la fonction de récompense n'a pas de conséquence sur l'objet que l'on cherche lorsqu'on résoud le problème de l'\gls{irl}. Armé d'un bon espace d'état il n'importe pas que l'algorithme concerné recherche la solution dans $\twosetsfunctions{\statespace}{\reals}$,  $\twosetsfunctions{\statespace\times \actionspace}{\reals}$ ou  $\twosetsfunctions{\statespace\times \actionspace \times \statespace}{\reals}$.

L'étude de la relation entre la condition d'optimalité d'une politique (comme celle de l'expert) et la fonction de récompense associée (que l'on cherche à connaître) nous amène à découvrir d'autres propriétés importantes pour l'analyse du problème de l'\gls{irl}. Nous nous intéressons particulièrement aux transformations qu'il est possible d'appliquer à la récompense sans perturber la relation d'ordre existant entre les valeurs des différentes politiques (relation d'ordre sur laquelle est basée la notion d'optimalité \eqref{eq:optimalite}). Nous ne souhaitons pas voir ces transformations en mesure de minimiser la fonction objectif d'un algorithme d'\gls{irl}. En effet, cela signifierait que l'on modifie la récompense sans modifier le sens qu'elle porte et donc qu'en réalité l'on ne résoud pas le problème de l'\gls{irl} mais une formulation dégénérée de celui-ci.

Un résultat immédiat, qui découle du fait que la condition d'optimalité d'une politique est basée sur une relation d'ordre sur les valeurs, qui sont par définition linéaires vis-à-vis de la récompense, est qu'il est possible d'appliquer n'importe quelle transformation affine de coefficient strictement positif à une récomepense sans en changer la signification. Ainsi notamment nous pourrons normaliser une récompense sans perte de généralité.

L'étude des transformations n'ayant pas d'impact sur les politiques optimales a été menée dans le cadre de l'\gls{rl}. L'objectif est de faciliter la recherche de politiques optimales sans modifier celles-ci. \citet{ng1999policy} trouvent une élégante condition nécessaire et suffisante à la préservation de politiques optimales par changement de récompense : à une récomense $\rewardfunc$ définie sur le triple espace état-action-état $\statespace \times \actionspace \statespace$, on peut ajouter toute fonction $\rewardfunc'$ définie sous la forme : 
\begin{equation}
\label{eq:rewardshaping}
\rewardfunc'(\state,\action,\state_{+1}) = \discount\rewardfunc_{\statespace}(s_{+1}) -  \rewardfunc_{\statespace}(s),
\end{equation}
où $\rewardfunc_{\statespace}$ est définie sur l'espace d'état. Cette condition est nécessaire dans le sens que toute fonction de récompense définie de la sorte peut être ajoutée à une fonction de récompense de $\twosetsfunctions{\statespace \times \actionspace \times \statespace}{\reals}$ sans en changer les politiques optimales. Elle est suffisante en ceci qu'une fonction de récompense $\rewardfunc'$ pourra être ajoutée à une autre si il existe une fonction $\rewardfunc_{\statespace}$ qui permette de l'écrire sous la forme donnée en \eqref{eq:rewardshaping}. Si une telle fonction n'existe pas, il est possible que les probabilités de transitions soient telles que la modification de la fonction de récompense entraînera une modification des politiques optimales.


Maintenant que nous disposons d'une meilleure compréhension de l'objet que nous cherchons, voyons comment les approches existantes mènent cette recherche.
** Premières formulations du problème 
   Dans la dernière partie de sa contribution, \citet{russell1998learning} pose le problème de l'\gls{irl} en termes généraux. Il ne propose pas de solution, mais explique l'intérêt du problème et isole des questions-clefs dont certaines restent encore ouvertes aujourd'hui.

   C'est dans \citep{ng2000algorithms} que les premières solutions apparaissent. Afin de trouver la récompense, les auteurs inversent l'équation de Bellman et formulent ainsi une condition nécessaire et suffisante sur la récompense pour qu'elle soit soluton du problème de l'\gls{irl}. Cette condition n'écarte pas les solutions dégénérées comme la récompense nulle. En conséquence, pour les \gls{mdp} finis où les propabilités de transitions sont connues, les auteurs intègrent une contrainte de pénalisation du désaccord avec l'expert à cette condition nécessaire et suffisante ainsi qu'une contrainte de régularisation en norme $1$ et obtiennent un programme linéaire qu'il est possible de résoudre. Pour les \gls{mdp} dont l'espace d'état est grand ou infini, une paramétrisation linéaire de la fonction de récompense est naturellement choisie (rares sont les approches qui choisissent un autre schéma). FIXME: y en a-t-il seulement ? de fait, et bien qu'il ne porte pas encore ce nom, l'attribut moyen de l'expert apparaît dans le développement. Uune version échantillonnée du programme linéaire découlant du schéma d'approximation linéaire de la récompense est proposé. La contrainte d'optimalité repose non plus sur la connaissance des probabilités de transition, mais sur la recherche d'une récompense donnant à la politique de l'expert une plus grande valeur qu'aux politiques optimales trouvées en optimisant la récompense telle que connues pendant les itértions précédentes de l'algorithme (il faut donc résoudre un \gls{mdp} à chaque itération).

   On retrouve dans ce travail plusieurs éléments communs aux approches ultérieures. Il y a le constat primordial que contrairement à ce qui se passe pour l'\gls{rl} où l'on cherche le point fixe d'un opérateur contractant (quand on estime une fonction de valeur) et qui donc existe et est unique, l'on a ici affaire à un problème mal posé, et il convient d'introduire des contraintes supplémentaires afin d'éviter les solutions dégénérées. Le choix et la justification de ces contraintes est un bon moyen de différencier les approches existantes. Il y a le schéma presque ubiquitaire de l'approximation linéaire de la fonction de récompense, qui entraîne l'apparition de l'attribut moyen. Enfin on retrouve la nécessité pour l'algorithme d'\gls{irl} de résoudre le problème "direct" (celui de l'\gls{rl}) de manière répétée.

** Méthodes nécessitant la résolution répétée d'un MDP
\label{hier:repetee}
   Cette nécessité est lourde de conséquence quant à l'usage pratique d'un algorithme d'\gls{irl}. La résolution du problème de l'\gls{rl} nécessite en effet soit beaucoup de données pour sa résolution \gls{offpolicy}, soit l'accès à un simulateur ou au système réel pour sa résolution \gls{onpolicy}.

   \citet{abbeel2004apprenticeship} proposent l'algorithme \gls{pirl} dans un travail séminal dont la structure va être reprise (plus ou moins consciemment) par plusieurs autres approches. La récompense est paramétrée linéairement, de fait la notion d'attribut moyen apparaît assez logiquement (\eqref{eq:mudef}). Elle obtient même une place centrale dans cette approche itérative de l'\gls{irl}. L'idée est, à chaque itération, d'apprendre la politique optimale pour la fonction de récompense courante (via un algorithme d'\gls{rl}). L'attribut moyen de cette politique est alors évalué. La fonction de coût que minimise l'approche joue sur une définition de la proximité entre l'attribut moyen de cette politique et l'attribut moyen de la politique de l'expert. A chaque itération cette proximité est évaluée, et le vecteur de paramètre change dans une direction qui va minimiser cette grandeur. La justification est que deux politiques d'attribut moyen semblable auront une valeur semblable pour toute récompense, y compris donc la récompense inconnue optimisée par l'expert (\ref{thm:closemuclosev}). Le seul bémol de cette logique est que la réciproque peut être fausse, deux attributs extrêmement différents peuvent mener à la même valeur FIXME:schéma Gridworld. Plusieurs autres approches sont basées sur le même schéma itératif. Certaines le sont explicitement, d'autre se défendent d'utiliser la même logique, mais la revue proposée par \citet{neu2009training} démontre que mathématiquement, ces approches sont bien semblables au travail de \citet{abbeel2004apprenticeship}. \gls{pirl} est intrinsèquement un algorithme d'imitation plus que d'\gls{irl}, en ce sens que la sortie est une politique stochastique (plus précisément un $\beta$-mixing de politiques déterministes) et non une fonction de récompense. Il est cependant facile de le "convertir" en extrayant la meilleur fonction de récompense, celle liée à la plus petite distance entre attribut moyen de la politique optimale et attribut moyen de l'expert. L'on perd en peut en pureté théorique ce que l'on gagne en simplicité d'utilisation.

   La technique proposée dans \cite{neu2007apprenticeship} (\gls{pm}) apporte une plus grand robustesse aux changements d'échelle des attributs. L'on a vu que l'ensemble des politiques optimales est stable par dilatation de la récompense, et donc par extension par dilatation des attributs. Cette plus grande robustesse est donc signe d'une formulation plus saine de l'\gls{irl}. Le bruit dans les attributs est également mieux géré. Le raisonnement porte toujours malheureusement sur une sortie sous forme de politique et non de récompense.

   Basé sur la théorie des jeux, l'algorithme \gls{mwal} de \cite{syed2008game} tombe sur un os[fn::Os à \gls{mwal}.]. Plus rapide à l'exécution que \gls{pirl} et capable de gérer la non optimalité de l'expert, il exige cependant en contrepartie énormément de connaissances à priori sur le problème : il faut que le vecteur de paramètres de l'approximation de la récompense soit positif. Il exige de plus de connaître la dynamique du \gls{mdp}. La définition de l'\gls{irl} comme un problème distinct de l'imitation y gagne en clarté car cette contribution mentionne explicitement les problèmes liés aux raisonnements sur des politiques mixées et non des récompenses, sans pour autant les résoudre.

   Ce travail est étendu dans \cite{syed2008apprenticeship}, en formulant la résolution du MDP comme un programme linéaire, on peut trouver une politique stationnaire, sans \gls{mixing} dans \gls{pirl} et \gls{mwal}. En formulant l'\gls{irl} comme un programme linéaire également, les auteurs trouvent \gls{lpal}, qui retourne un politique (non une récompense). La formulation de ce programme linéaire met en jeu des grandeurs qui correspondent à l'attribut moyen de politiques optimales pour des récompenses arbitraires, la structure itérative est donc toujours présente.

   L'approche de classification à marge structurée décrite en \ref{hier:attributs} et utilisée en \citep{ratliff2007imitation} pour l'imitation supervisée apparaît également dans \citep{ratliff2006maximum}. Plutôt que d'associer une action à un état comme dans l'approche supervisée, l'algorithme \gls{mmp} proposé associe une fonction de récompense à un \gls{mdp}. Bien que les auteurs s'en défendent, cette formulation est compatible avec la structure familière des autres algorithmes d'\gls{irl} de cette période, comme le démontrent \citet{neu2009training}. La philosophie à la base de l'approche reste cependant différente, et bien que les applications envisagées sont variées et non triviales (voir \citep{ratliff2009learning}, où elles sont toutes réunies et la méthode de boosting proposée en \cite{ratliff2007boosting} expliquée plus en profondeur), d'autres problèmes apparaissent comme la nécessité de résoudre de multiples \glspl{mdp} de manière tractable, et de formuler le problème du contrôle non pas comme un \gls{mdp}, mais comme de multiples \glspl{mdp} "compatibles" entre eux.

   La formulation probabiliste de \gls{maxent} de \cite{ziebart2008maximum} est intéressante car elle fournit un critère (l'entropie) pour choisir entre deux politiques qui jusqu'à présent étaient équivalentes (même valeur ou même attribut moyen). Structurellement, cependant, les différences restent minces avec toujours présentes la résolution répétée d'un MDP et l'estimation de l'attribut moyen de politiques arbitraire.

   Une approche bayésienne (\gls{birl}) de \cite{ramachandran2007bayesian} (et curieusement donnant le même algorithme qu'une approche non officiellement \gls{irl} et plus ancienne, \cite{chajewska2001learning}) diffère dans l'exposition du raisonnement, mais reste très similaire dans l'implémentation, puisque'il faut toujours calculer des politiques optimales et obtenir des échantillons de cette politique (pour calculer des postérieurs bayésiens et non plus des attributs moyens). Etendu dans \cite{lopes2009active} pour l'ctive learning de la même manière que machine le faisait pour le supervisé.

   La plupart de ces approches sont résumées dans \cite{neu2009training}. Ces différentes contributions ont le mérite d'observer le problème sous plusieurs angles, de se placer aux limites du problème (expert non optimal, attributs bruités, etc.) et d'aborder des questions fondamentales (notion de distance entre politiques ou récompenses). Le manque d'harmonisation du domaine de l'\gls{irl} (encore jeune) se fait sentir. Chacun redéfinit le problème à sa manière. Toutes ces approches sont malgré cela structurellement très similaires  : schéma itératif avec résolution répétée de MDP et approximation de l'attribut moyen de la politique courante pour comparaison à celui de l'expert. Les approches les plus tardives font apparaître les difficultés soulevées par la recherche d'un politique mixée, d'une politique au lieu d'une récompense, de l'absence d'un critère commun, de la résolution répétée du MDP et de l'approximation de l'attribut moyen. Si de bonnes solutions aux deux premiers problèmes sont proposées, les autres soucis ne trouvent en revanche pas encore de réponse.
   
   Outre les applications variées développées au fur et à mesure par \citet{ratliff2009learning}, il est interessant de constater l'efficacité des algorithmes de cette veine que \citet{abbeel2010autonomous} ont démontrée par le contrôle d'un hélicoptère radiocommandé en vol acrobatique. L'\gls{irl} ne joue cependant qu'un petit rôle dans cette expérience, où la contribution principale est l'apprentissage du modèle dynamique de l'hélicoptère. Ce modèle est ensuite utilisé pour la résolution du problème de l'\gls{rl}, et donc également de manière répétée lors de la résolution de l'\gls{irl}.


** Méthodes ne nécessitant pas la résolution répétée d'un MDP 
   Les problèmes intrinsèquement liés à la structure itérative des premiers algorithmes d'\gls{irl} étant identifiés, un regain de créativité a permis l'émergence d'approches beaucoup plus hétérogènes ces dernières années.
   
   # Rem olivier : faudrait voir si la définition de la métrique n'impose pas de résolution ou quelque chose de similaire. Me souviens plus exactement.
   Présenté philosophiquement comme une approche supervisée de l'imitation, la méthode de \cite{melo2010learning} repose sur une notion particulière de distance dans un \gls{mdp}. Cette distance n'est pas uniquement basée sur la définition de l'espace d'état (comme l'est par exemple la distance euclidienne standard) mais prend en compte la dynamique du \gls{mdp} afin que deux états semblables pour le problème qui nous préoccupe (permettant d'accéder aux mêmes états en effectuant la même action) aient une distance nulle. Le calcul de cette distance cache la résolution du \gls{mdp} par des méthodes de \gls{dp}, l'on trouve le point fixe d'un opérateur par son application répétée. Bien que la récompense n'apparaisse pas explicitement dans l'exposition de la méthode, le raisonnement qui définit l'échantillonage interacif et la politique de sortie de l'algorithm est semblable a ce qui a été proposé dans \cite{lopes2009active}.

   \gls{gpirl} \cite{levine2011nonlinear} dans la lignée de \gls{firl} \cite{levine2010feature} débloque plusieurs problèmes d'un coup. On ne suppose plus que la fonction de récompense est linéaire dans les attributs. On peut l'apprendre et faire de la sélection de attribut par la même occasion. FIXME: Il y avait une raison pour laquelle ce n'était pas tractable, la retrouver.

   "\gls{irlgp}" \cite{qiao2011inverse} et \cite{jin2010gaussian} ne sont pas tractables non plus FIXME:retrouver pourquoi.


     \gls{mdp} soluble linéairement : \cite{dvijotham2010inverse}. Il faut des \gls{mdp} solubles linéairement.

   \gls{relent} fait sauter la plupart des contraintes qui nous préoccupent (argumentaire à rapprocher de \gls{maxent}) \cite{boularias2011relative}. Il suffit d'avoir des échantillons experts et des échantillons aléatoires. On est dans le cadre définit avant de commencer l'état de l'art, et non plus dans le cadre mal défini des approches qui on suivi \gls{pirl}.

* \gls{lstdmu} 
# <<hier:lstdmu>>
** Principe 
  On rappelle que l'attribut moyen est une grandeur centrale en renforcement (dit en [[Attribut moyen]]). Les algorithmes qui l'utilisent ne présupposent pas de moyen de le calculer. La méthode de base consiste à faire jouer un simulateur et faire une estimation de Monte-Carlo.

  L'attribut moyen est par sa définition une fonction de valeur vectorielle. \gls{lstd} peut donc être adapté pour l'approximer.
** Avantages 
  Les avantages que \gls{lstd} possède pour l'approximation de fonction de valeur : \gls{batch}, /offline/ et /sample-efficient/ sont transférés à l'approximation de l'attribut moyen.

  On peut ainsi estimer l'attribut moyen d'une politique arbitraire sans utiliser de simulateur et sans connaître les probabilités de transition.

** Illustration							       
# rem olivier : Faire la liste des expériences en disant ce qu'elles montrent. C'est nécessaire pour trouver une structure cohérente aux parties expérimentales dans les 3 chapitres de contribution.
   En utilisant \gls{pirl} avec LSPI et \gls{lstdmu}$\mu$, on peut porter PIRL en mode /batch/ avec une perte de performance minimale, et que l'on peut mitiger en fonction de la quantité de données non expertes disponibles. Cela évite d'avoir à se servir d'un simulateur, qui n'est pas toujours disponible. En le modifiant pour qu'il sorte une récompense et non une politique on peut corriger les "erreurs de jeunesse" des algorithmes dans la lignée de \gls{pirl}. Ça reste non idéal cependant.
   
* \gls{scirl}
# snippet: tiré de ratliff2009learning, l'extrait suivant est exactement ce que SCIRL fait : Unfortunately, such a system is inherently myopic. This form of imitation learning assumes that all information necessary to make a decision at the current state can be easily encoded into a single vector of features that enables prediction with a relatively simple, learned function. However, this is often particularly difficult because the features must encode information regarding the future long-term consequences of taking an action. Under this framework, much of the work that we would like learning to handle is pushed onto the engineer in the form of feature extraction.

# snippet : copier du papier nips le truc qui explique qu'une récompense nule implique une erreur de classif de batard.
** Liens entre classification et \gls{rl}
  La classification peut-être utilisée pour faire de l'imitation (fait mentionné en sous-section \ref{hier:nonari}). Cela à l'avantage de ne nécessiter que des données de l'expert. Mais cela ne tient pas compte de la structure du MDP. La plupart des classifieurs apprennent une fonction de score [fn::Les arbres sont une exception.]. De fait la règle de décision du classifieur et la règle de décision d'un agent optimal dans un \gls{mdp} (équation présentée en [[Cadre des \glspl{mdp} pour la prise de décision séquentielle]]) sont similaires. On peut donc dresser un parallèle entre la fonction de score du classifieur et la fonction de qualité de l'expert.

  \gls{scirl} et \gls{cascading} (décrit en \ref{hier:cascading}) utilisent cette similarité pour introduire la structure du MDP dans (ou à la suite de) une méthode de classification. On espère ainsi pouvoir faire de l'\gls{irl} (trouver une récompense, pas apprendre une politique par copie) tout en profitant des avantages offerts par la méthode supervisée (efficacité en termes de données, implémentations /off-the-shelf/, etc.).

  Si l'on utilise un classifieur où cette fonction de score/qualité est approximée par un schéma linéaire, alors on retombe sur l'attribut moyen. Il faut encore approximer celui-ci, mais cela est courant dans la littérature, et surtout c'est précisément le problème résolu par \gls{lstdmu} (en [[hier:lstdmu]]). 

** Description 
** Validation théorique 
** Validation pratique rapide (problèmes jouets) 
*** TODO Donner la structure : qu'est-ce que chaque application démontre ?
** Mise en relief de l'influence des routines 
** Conclusion 
   SCIRL règle quelques problèmes des premiers algorithmes d'IRL et a de meilleures performances que \gls{maxent}. Il est théoriquement simple à expliquer et résout bien le problème de l'\gls{irl} tel qu'on l'a formulé. Il peut fonctionner avec uniquement des données de l'expert, ce qui ouvre la porte à des applications réelles.

* SCIRLBoost 
** Problème de la définition des fonctions de base  
** Description de l'algorithme 
** Validation sur les problèmes jouets 
* Cascading 
# <<hier:cascading>>
** Description 
*** Description 
*** Différences de concept avec SCIRL 
** Validation théorique 
** Validation pratique rapide (problèmes jouets) 
** Mise en relief de l'influence des routines 
** Comparaison pratique rapide de SCIRL et Cascading 
** Conclusion 
   Cascading a des performances similaires à SCIRL et est encore plus flexible, puisque des méthodes supervisées non paramétriques (ou à détermination automatique de paramètres) peuvent être employées, ce qui en plus de résoudre les problèmes structurels de PIRL, résout les problèmes plus fondamentaux de l'approximation linéaire de la fonction de valeur ou du choix des attributs.
* (Validation expérimentale) 
* Rappel des contributions 
* Perspectives de recherche 
* Bibliographie 
\bibliographystyle{plainnat}
\bibliography{../../Biblio/Biblio}
* Glossaire 
\printglossaries
