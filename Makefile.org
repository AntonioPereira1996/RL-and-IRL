* Introduction
#FIXME: Passer lint ou un autre outil d'analyse statique de code sur tout. Pychecker pour python. Quand j'aurais le temps.
  
* Makefiles rules
  The rules are written in the file they affect. They are recalled here, because the Makefile should only be tangled from Makefile.org. Otherwise, tangling LSPI.org, for example, would overwrite LSPI.h and LSPI.c, which is expected, but also Makefile, which is not. Therefore the other .org files only define named code snippets that are recalled and tangled here.
** Misc.
Those who do not fit in the others categories (because they fit in more than one or none of them) are aggregated here :
  #+begin_src makefile :tangle Makefile :noweb yes
<<IRL_Globals_make>>
<<DP_mu_make>>
<<RL_Globals_make>>
<<TT_Exp2_make>>
<<TT_Exp3_make>>
<<TT_Test0_make>>
<<TT_Test1_make>>
<<TT_Test2_make>>
<<TT_Test3_make>>
  #+end_src
** Code extraction

  #+begin_src makefile :tangle Makefile :noweb yes
tangle=emacs -batch --visit $1 --funcall org-babel-tangle --script ~/.emacs >/dev/null 2>/dev/null

<<LSPI_code_make>>
<<LSTDQ_code_make>>
<<LSTDmu_code_make>>
<<TT_Exp2_code_make>>
<<TT_Exp3_code_make>>
<<utils_code_make>>
<<TT_code_make>>
<<TT_Test0_code_make>>
<<TT_Test1_code_make>>
<<TT_Test23_code_make>>
<<a2a_code_make>>
<<ANIRL_code_make>>
<<criteria_code_make>>
<<greedy_code_make>>
<<NA_code_make>>
<<Cascading_code_make>>
  #+end_src
** C source to .o file

   C code is compiled with
  
    #+begin_src makefile :tangle Makefile
export CFLAGS=-g -Wall -pedantic -std=c99 `pkg-config --cflags gsl`
export LFLAGS=`pkg-config --libs gsl` -lm -g
c2obj=gcc $(CFLAGS) -c $1
o2exe=gcc $(LFLAGS)
    #+end_src
  
#+begin_src makefile :tangle Makefile :noweb yes
<<LSPI_c2o_make>>
<<LSTDQ_c2o_make>>
<<LSTDmu_c2o_make>>
<<utils_c2o_make>>
<<a2a_c2o_make>>
<<ANIRL_c2o_make>>
<<criteria_c2o_make>>
<<greedy_c2o_make>>
  #+end_src
** Cleaning
    #+begin_src makefile :tangle Makefile :noweb yes
export XARGS_OPT=-tr
<<LSPI_clean_make>>
<<LSTDQ_clean_make>>
<<LSTDmu_clean_make>>
<<TT_Exp2_clean_make>>
<<TT_Exp3_clean_make>>
<<utils_clean_make>>
<<NA_clean_make>>
<<TT_Test0_clean_make>>
<<TT_Test1_clean_make>>
<<TT_Test23_clean_make>>
<<TT_clean_make>>
<<a2a_clean_make>>
<<ANIRL_clean_make>>
<<criteria_clean_make>>
<<greedy_clean_make>>

clean: TT_Test0_clean TT_Test1_clean TT_Test23_clean IRL_Globals_clean LSPI_clean LSTDQ_clean LSTDmu_clean DP_mu_clean NA_clean RL_Globals_clean TT_Exp2_clean TT_Exp3_clean utils_clean a2a_clean criteria_clean greedy_clean TT_clean ANIRL_clean
	$(MAKE) -C ChainWalk clean   
	$(MAKE) -C GridWorld clean
	$(MAKE) -C InvertedPendulum clean
	$(MAKE) -C Highway clean
    #+end_src
* End results
** Published Work
*** Papers
**** TODO Retrouver tous ces papiers et s'assurer qu'on peut les recompiler
**** LSTD$\mu$
    - IJCAI 2011
      - Paper
      - Poster
      - Slides
    - EWRL 2011
      - Paper
      - Poster
      - Slides
    - JFPDA 2011
      - Paper
      - Poster
      - Slides
**** Dimensionality reduction (MLASA 2011)
    - Paper
    - Poster
    - Slides
*** Figures
**** TODO Lister les features des papiers ci dessus
** Unpublished work
*** Papers and drafts
**** SCIRL
**** Cascading
*** Figures
**** TODO Reprendre les 12 figures
**** TODO Reprendre le travail sur le GridWorld
** Archive
*** LAFEM
   - LAFEM_Exp1 (GridWorld)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp1:
	make -C GridWorld V_expert.pdf V_agent.pdf true_reward.pdf retrieved_reward.pdf
    #+end_src
   - LAFEM_Exp2 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp2:
	make -C InvertedPendulum LAFEM_Exp2
    #+end_src
   - LAFEM_Exp3 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp3:
	make -C InvertedPendulum LAFEM_Exp3
    #+end_src
   - LAFEM_Exp4 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp4:
	make -C InvertedPendulum LAFEM_Exp4_quality.pdf
LAFEM_Exp42:
	make -C InvertedPendulum LAFEM_Exp4_quality_EB.pdf
    #+end_src
   - LAFEM_Exp5 (InvertedPendulum) //FIXME:Le virer, manifesteent il n'existe pas.
    #+begin_src makefile :tangle Makefile
LAFEM_Exp5:
	make -C InvertedPendulum LAFEM_Exp5_true_R.pdf LAFEM_Exp5_lafem_R.pdf LAFEM_Exp5_Vexpert.pdf LAFEM_Exp5_Vagent.pdf
    #+end_src
   - LAFEM_Exp6 (Highway)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp6:
	make -C Highway FastResults.mat SafeResults.mat
    #+end_src
   - LAFEM_Exp6_EB (Highway)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp6_EB:
	make -C Highway FastResults_EB.pdf SafeResults_EB.pdf
    #+end_src
   - LAFEM_Exp7 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
LAFEM_Exp7:
	make -C InvertedPendulum LAFEM_Exp7_Vphi.pdf LAFEM_Exp7_Vmu.pdf
    #+end_src
   - MCLength (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
MCLength:
	make -C InvertedPendulum MCLength
    #+end_src
     
*** TaskTransfer
    - TT_Exp1 (GridWorld)
    - TT_Exp2
    - TT_Exp3
    - TT_test0
    - TT_test1
    - TT_test2
    - TT_test3
*** LSTDmu
   - criteria_mc.tex (GridWorld)
    #+begin_src makefile :tangle Makefile
criteria_mc.tex:
	make -C GridWorld criteria_mc.tex
    #+end_src

   - criteria_lstd_EB.tex (GridWorld) / criteria_lstd.tex (GridWorld)
    #+begin_src makefile :tangle Makefile
criteria_lstd.tex:
	make -C GridWorld criteria_lstd.tex
    #+end_src

   - both_error.tex (GridWorld) / both_error_EB.tex (GridWorld)
    #+begin_src makefile :tangle Makefile
both_error.tex:
	make -C GridWorld both_error.tex
    #+end_src
   - threshold.tex (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
threshold.tex:
	make -C InvertedPendulum threshold.tex
    #+end_src
   - threshold_EB.tex (InvertedPendulum)
   - ANIRL_Exp1 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp1:
	make -C InvertedPendulum ANIRL_Exp1
    #+end_src
   - ANIRL_Exp4 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp4:
	make -C InvertedPendulum ANIRL_Exp4
    #+end_src
   - ANIRL_Exp2 (GridWorld)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp2:
	make -C GridWorld ANIRL_Exp2
    #+end_src
   - ANIRL_Exp5 (Highway)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp5:
	make -C Highway ANIRL_Exp5
    #+end_src
   - ANIRL_Exp6 (Highway)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp6:
	make -C Highway ANIRL_Exp6
    #+end_src
   - ANIRL_Exp2_test1 (GridWorld)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp2_test1:
	make -C GridWorld ANIRL_Exp2_test1
    #+end_src
   - LSPI_Exp1 (GridWorld)
    #+begin_src makefile :tangle Makefile
LSPI_Exp1:
	make -C GridWorld LSPI_Exp1
    #+end_src
   - ANIRL_Exp3 (GridWorld)
    #+begin_src makefile :tangle Makefile
ANIRL_Exp3:
	make -C GridWorld ANIRL_Exp3
    #+end_src
   - SCIRL_Exp1 (GridWorld)
    #+begin_src makefile :tangle Makefile
SCIRL_Exp1:
	make -C GridWorld SCIRL_Exp1
    #+end_src
   - SCIRL_Exp2 (Highway)
    #+begin_src makefile :tangle Makefile
SCIRL_Exp2:
	make -C Highway SCIRL_Exp2
    #+end_src
   - SCIRL_Exp3 (Highway)
    #+begin_src makefile :tangle Makefile
SCIRL_Exp3:
	make -C Highway SCIRL_Exp3
    #+end_src
   - Cascading_Exp1 (Highway)
    #+begin_src makefile :tangle Makefile
Cascading_Exp1:
	make -C Highway Cascading_Exp1
    #+end_src
   - Cascad1ing_Exp2 (GridWorld)
    #+begin_src makefile :tangle Makefile
Cascading_Exp2:
	make -C GridWorld Cascading_Exp2
    #+end_src
   - Cascad1ing_Exp3 (GridWorld)
    #+begin_src makefile :tangle Makefile
Cascading_Exp3:
	make -C GridWorld Cascading_Exp3
    #+end_src
   - Cascad1ing_Exp4 (InvertedPendulum)
    #+begin_src makefile :tangle Makefile
Cascading_Exp4:
	make -C InvertedPendulum Cascading_Exp4
    #+end_src
    
*** Previous results
   - lagoudakis2003least_figure10.pdf (ChainWalk)
    #+begin_src makefile :tangle Makefile
lagoudakis2003least_figure10.pdf:
	make -C ChainWalk lagoudakis2003least_figure10.pdf
    #+end_src
*** Tests
  #+begin_src makefile :tangle Makefile :noweb yes
test: TT_test0 TT_test1 TT_test2 TT_test3
    #+end_src
* Inception
Yo dawg, I heard you like tangling makefiles, so I added a makefile rule to tangle your makefile so you can tangle while you make.

  #+begin_src makefile :tangle Makefile :noweb yes
SUB_DIRS=ChainWalk GridWorld InvertedPendulum  Highway
Makefile:
	cat *.org > All.org; emacs -batch --visit All.org --funcall org-babel-tangle --script ~/.emacs; rm All.org &&\
	for dir in $(SUB_DIRS); do $(MAKE) -C $$dir Makefile; done 
    #+end_src
