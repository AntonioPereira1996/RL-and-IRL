* Introduction
  In this directory lies the code I use when I work on my PhD.
  
  This file describes the technical use of each file of this directory. It is tangled as the Makefile by running :
 #+begin_src sh
emacs -batch --visit Makefile.org --funcall org-babel-tangle --script ~/.emacs
#+end_src


  The [[End results]] produced by this Makfile have their own dedicated section.
  
* End results
  This code produces graphs. These graphs either are reproduction of previously published results, or part of original research.

  The graphs are based on the application of different algorithms on toy problems. Each toy problem lives in its sub directory. The sub-directories are :

  #+begin_src makefile :tangle Makefile
SUB_DIRS=ChainWalk GridWorld InvertedPendulum
  #+end_src

** Previously published results
*** Lest Square Policy Iteration from Lagoudakis and Parr   
   Figure 10 of \cite{lagoudakis2003least} can be made by executing :

#+begin_src sh
 make lagoudakis2003_least_figure10.pdf
#+end_src
   
   This triggers the following :
    #+begin_src makefile :tangle Makefile
lagoudakis2003least_figure10.pdf: LSPI.o LSTDQ.o utils.o greedy.o
	$(MAKE) -C ChainWalk lagoudakis2003least_figure10.pdf && cp ChainWalk/lagoudakis2003least_figure10.pdf ./
    #+end_src
   
   The figure should be the same as in the forementionned paper, but with error bars. See the relevant [[file:ChainWalk/Makefile.org][Makefile]] to learn more about it.

** Original research
*** LSTD-$\mu$
    Figures used in the paper about LSTD-$\mu$ can be made.

#+begin_src sh
 make both_error_EB.pdf threshold.pdf threshold_EB.pdf criteria_mc.pdf criteria_lstd_EB.pdf
#+end_src
    
    The PDF files do not include any text. To view the whole figure, you have to compile the .tex files.
   
    #+begin_src makefile :tangle Makefile
both_error_EB.pdf: LSPI.o LSTDQ.o utils.o greedy.o abbeel2004apprenticeship.o LSTDmu.o criteria.o
	$(MAKE) -C GridWorld both_error_EB.tex && cp GridWorld/both_error_EB.pdf ./both_error_EB.pdf

threshold.pdf: LSPI.o LSTDQ.o utils.o greedy.o abbeel2004apprenticeship.o LSTDmu.o criteria.o
	$(MAKE) -C InvertedPendulum threshold.tex && cp InvertedPendulum/threshold.pdf ./threshold.pdf

threshold_EB.pdf: LSPI.o LSTDQ.o utils.o greedy.o abbeel2004apprenticeship.o LSTDmu.o criteria.o
	$(MAKE) -C InvertedPendulum threshold_EB.tex && cp InvertedPendulum/threshold_EB.pdf ./threshold.pdf

criteria_mc.pdf: LSPI.o LSTDQ.o utils.o greedy.o abbeel2004apprenticeship.o LSTDmu.o criteria.o
	$(MAKE) -C GridWorld criteria_mc.tex && cp GridWorld/criteria_mc.pdf ./criteria_mc.pdf

criteria_lstd_EB.pdf: LSPI.o LSTDQ.o utils.o greedy.o abbeel2004apprenticeship.o LSTDmu.o criteria.o
	$(MAKE) -C GridWorld criteria_lstd_EB.tex && cp GridWorld/criteria_lstd_EB.pdf ./criteria_lstd_EB.pdf

    #+end_src

* Miscellaneous
** Compilation flags
  C code is compiled with
  
    #+begin_src makefile :tangle Makefile
export CFLAGS=-O3 -Wall -pedantic -std=c99 `pkg-config --cflags gsl`
export LFLAGS=`pkg-config --libs gsl` -lm -O3
    #+end_src
** Cleaning
    #+begin_src makefilefile :tangle Makefile :noweb yes
<<TT_cleanTest0_make>>

clean: TT_cleanTest0
	find . -maxdepth 1 -iname "*.o"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.pdf" | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*~"    | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.html"    | xargs -tr rm &&\
	$(MAKE) -C ChainWalk clean         
	$(MAKE) -C GridWorld clean
	$(MAKE) -C InvertedPendulum clean
	find . -maxdepth 1 -iname "RL_Globals.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "LSTDQ.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "LSTDQ.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "LSPI.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "LSPI.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "greedy.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "greedy.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "abbeel2004apprenticeship.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "abbeel2004apprenticeship.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "criteria.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "criteria.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "IRL_Globals.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "LSTDmu.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "LSTDmu.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "utils.c"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "utils.h"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "code"   | xargs -tr rm &&\
	find . -maxdepth 1 -iname "doc"   | xargs -tr rm -rf
    #+end_src
* Org files
  I use [[http://orgmode.org/][org-mode]] to write my code.

  The .org files containing both some code and its documentation are :
  #+begin_src makefile :tangle Makefile
ORG_CODE_FILES=LSPI.org RL_Globals.org LSTDQ.org greedy.org Makefile.org ChainWalk/Makefile.org GridWorld/Makefile.org InvertedPendulum/Makefile.org abbeel2004apprenticeship.org criteria.org IRL_Globals.org LSTDmu.org utils.org TaskTransfer.org
  #+end_src

** Documentation

   Documentation can be extracted from the .org files by executing
   #+begin_src sh
 make doc
   #+end_src

   which triggers the following rules :
    #+begin_src makefile :tangle Makefile
HTML_FILES=$(ORG_CODE_FILES:.org=.html)

doc: $(HTML_FILES)
	mkdir -p doc &&\
	for dir in $(SUB_DIRS); do $(MAKE) -C $$dir doc && mkdir -p doc/$$dir && mv $$dir/*.html doc/$$dir/; done &&\
	mv *.html doc/

%.html:%.org
	emacs -batch --visit $*.org --funcall org-export-as-html-and-open --script ~/.emacs
    #+end_src
   
** Code extraction

   The code embedded in the .org can be tangled.
    #+begin_src makefile :tangle Makefile
code:$(ORG_CODE_FILES)
	for file in $(ORG_CODE_FILES); do emacs -batch --visit $$file --funcall org-babel-tangle --script ~/.emacs; done &&\
	for dir in $(SUB_DIRS); do $(MAKE) -C $$dir code ; done &&\
	touch code
    #+end_src
* Common object files
  Some code is shared amongst some of the executables.
    #+begin_src makefile :tangle Makefile
OBJECT_FILES=LSPI.o LSTDQ.o utils.o greedy.o abbeel2004apprenticeship.o criteria.o LSTDmu.o
obj:$(OBJECT_FILES)

LSPI.o: code LSPI.h LSPI.c utils.h LSTDQ.h greedy.h
	gcc -c $(CFLAGS) LSPI.c

LSTDQ.o: LSTDQ.h LSTDQ.c code
	gcc -c $(CFLAGS) LSTDQ.c

utils.o: utils.h utils.c
	gcc -c $(CFLAGS) utils.c

greedy.o: greedy.h greedy.c code
	gcc -c $(CFLAGS) greedy.c

abbeel2004apprenticeship.o: abbeel2004apprenticeship.c abbeel2004apprenticeship.h LSPI.h utils.h criteria.h
	gcc -c $(CFLAGS) abbeel2004apprenticeship.c

criteria.o: criteria.h criteria.c RL_Globals.h
	gcc -c $(CFLAGS) criteria.c

LSTDmu.o: LSTDmu.h LSTDmu.c greedy.h utils.h criteria.h LSPI.h
	gcc -c $(CFLAGS) LSTDmu.c

TT_polytope.o: TT_polytope.c TT_polytope.h TT_Globals.h
	gcc -c $(CFLAGS) TT_polytope.c

TaskTransfer.o: TaskTransfer.c TT_polytope.h TT_Globals.h
	gcc -c $(CFLAGS) TaskTransfer.c
    #+end_src
* Tests
  #+begin_src makefile :tangle Makefile :noweb yes
test: TT_test0 TT_test1

<<TT_test0_make>>

<<TT_test1_make>>

<<totolarifletee>>
    #+end_src
