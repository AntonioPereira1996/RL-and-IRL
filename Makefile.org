* Introduction
  In this directory lies the code I use when I work on my PhD.
  
  This file describes the technical use of each file of this directory. It is tangled as the Makefile by running :
 #+begin_src sh
emacs -batch --visit Makefile.org --funcall org-babel-tangle --script ~/.emacs
#+end_src


  The [[End results]] produced by this Makfile have their own dedicated section.
  
* Makefiles rules
  The rules are written in the file they work with. They are recalled here, because the Makefile should only be tangled from Makefile.org. Otherwise, tangling LSPI.org, for example, would overwrite LSPI.h and LSPI.c, which is expected, but also Makefile, which is not. Therefore the other .org files only define named code snippets that are recalled and tangled here.
** Misc.
Those who do not fit in the others categories (because they fit in more than one or none of them) are aggregated here :
  #+begin_src makefile :tangle Makefile :noweb yes
<<IRL_Globals_make>>
<<DP_mu_make>>
<<RL_Globals_make>>
<<TT_Exp2_make>>
<<TT_Exp3_make>>
<<TT_Test0_make>>
<<TT_Test1_make>>
<<TT_Test2_make>>
<<TT_Test3_make>>
  #+end_src
** Code extraction
  #+begin_src makefile :tangle Makefile :noweb yes
tangle=emacs -batch --visit $1 --funcall org-babel-tangle --script ~/.emacs

<<LSPI_code_make>>
<<LSTDQ_code_make>>
<<LSTDmu_code_make>>
<<TT_Exp2_code_make>>
<<TT_Exp3_code_make>>
<<utils_code_make>>
<<TT_code_make>>
<<TT_Test0_code_make>>
<<TT_Test1_code_make>>
<<TT_Test23_code_make>>
<<a2a_code_make>>
<<criteria_code_make>>
<<greedy_code_make>>
  #+end_src
** C source to .o file

   C code is compiled with
  
    #+begin_src makefile :tangle Makefile
export CFLAGS=-O3 -Wall -pedantic -std=c99 `pkg-config --cflags gsl`
export LFLAGS=`pkg-config --libs gsl` -lm -O3
    #+end_src
  
#+begin_src makefile :tangle Makefile :noweb yes
<<LSPI_c2o_make>>
<<LSTDQ_c2o_make>>
<<LSTDmu_c2o_make>>
<<utils_c2o_make>>
<<a2a_c2o_make>>
<<criteria_c2o_make>>
<<greedy_c2o_make>>
  #+end_src
** Org source to PDF
    #+begin_src makefile :tangle Makefile :noweb yes
<<NA_org2pdf_make>>
    #+end_src
** Cleaning
    #+begin_src makefile :tangle Makefile :noweb yes
export XARGS_OPT=-tr
<<LSPI_clean_make>>
<<LSTDQ_clean_make>>
<<LSTDmu_clean_make>>
<<TT_Exp2_clean_make>>
<<TT_Exp3_clean_make>>
<<utils_clean_make>>
<<NA_clean_make>>
<<TT_Test0_clean_make>>
<<TT_Test1_clean_make>>
<<TT_Test23_clean_make>>
<<TT_clean_make>>
<<a2a_clean_make>>
<<criteria_clean_make>>
<<greedy_clean_make>>

clean: TT_Test0_clean TT_Test1_clean TT_Test23_clean IRL_Globals_clean LSPI_clean LSTDQ_clean LSTDmu_clean DP_mu_clean NA_clean RL_Globals_clean TT_Exp2_clean TT_Exp3_clean utils_clean a2a_clean criteria_clean greedy_clean TT_clean
	$(MAKE) -C ChainWalk clean   
	$(MAKE) -C GridWorld clean
	$(MAKE) -C InvertedPendulum clean
    #+end_src
* End results
** TaskTransfer
   - TT_Exp1 (GridWorld)
   - TT_Exp2
   - TT_Exp3
   - TT_test0
   - TT_test1
   - TT_test2
   - TT_test3
** LSTDmu
   - criteria_mc.tex (GridWorld)
   - criteria_lstd_EB.tex (GridWorld) / criteria_lstd.tex (GridWorld)
   - both_error.tex (GridWorld) / both_error_EB.tex (GridWorld)
   - threshold.tex (InvertedPendulum)
   - threshold_EB.tex (InvertedPendulum)
** Previous results
   - lagoudakis2003least_figure10.pdf (ChainWalk)
* Tests
  #+begin_src makefile :tangle Makefile :noweb yes
test: TT_test0 TT_test1 TT_test2 TT_test3
    #+end_src



* Inception
Yo dawg, I heard you like tangling makefiles, so I added a makefile rule to tangle your makefile so you can tangle while you make.

  #+begin_src makefile :tangle Makefile :noweb yes
SUB_DIRS=ChainWalk GridWorld InvertedPendulum klein2011dimensionality
Makefile:
	cat *.org > All.org; emacs -batch --visit All.org --funcall org-babel-tangle --script ~/.emacs; rm All.org &&\
	for dir in $(SUB_DIRS); do $(MAKE) -C $$dir Makefile; done 
    #+end_src
