#+TITLE: Global variables for the IRL Code

* Introduction
  We define here some global variables so that the argument list of the different functions are less than 8 lines long. They are just declared extern here. It is  a good idea to set all of them once and for all in the same place in the client code.
* Global variables
  - Value that stops the algorithm if reached by $t$
    #+begin_src c :tangle IRL_Globals.h :main no
extern double g_dEpsilon_anirl;
    #+end_src
  - Number of iterations after which the ANIRL loop is stopped, even if the $t<\espilon_{ANIRL}$ criterion is not matched
    #+begin_src c :tangle IRL_Globals.h :main no
extern unsigned int g_iIt_max_anirl;
    #+end_src
  - Discount factor for ANIRL
    #+begin_src c :tangle IRL_Globals.h :main no
extern double g_dGamma_anirl;
    #+end_src
  - Dimension of the \psi generated feature space
    #+begin_src c :tangle IRL_Globals.h :main no
extern unsigned int g_iP;
    #+end_src
  - $S\rightarrow\mathbb{R}^p$ features over which $\mu$ is computed
    #+begin_src c :tangle IRL_Globals.h :main no
extern gsl_matrix* (*g_fPsi)(gsl_matrix*);
    #+end_src
  - Where to store the expert's $\omega$
    #+begin_src c :tangle IRL_Globals.h :main no
extern gsl_matrix* g_mOmega_E;
    #+end_src
  - Simulator whose argument is the number of trajectories
    #+begin_src c :tangle IRL_Globals.h :main no
extern gsl_matrix* (*g_fSimulator)(int);
    #+end_src
  - Number of transitions generated by the simulator
    #+begin_src c :tangle IRL_Globals.h :main no
extern unsigned int g_iNb_samples;
    #+end_src
  - Regularisation is needed when computing the mu of a good policy because only a handful of state action couples are visited, thus making the A matrix singular
    #+begin_src c :tangle IRL_Globals.h :main no
extern double g_dLambda_lstdmu; 
    #+end_src
  - When using ANIRL, we store the best score when the measured error is at its lowest yet. This does not mean that the other criteria (especially $t$) also are at their lowest. These are declared for example in abbeel2004apprenticeship.c but also used in LSTDmu.c.
    #+begin_src c :tangle IRL_Globals.h :main no
extern double g_dBest_error;
extern double g_dBest_true_error;
extern double g_dBest_diff;
extern double g_dBest_t;
extern gsl_matrix* g_mBest_omega;
   #+end_src

  - The initial state(s) for which \mu is to be computed is given to LSTDmu through this function. One state per line. When using Monte-Carlo, it is assumed that the first sample or each trajectory is among the initial state(s)
    #+begin_src c :tangle IRL_Globals.h :main no
extern gsl_matrix* (*g_fS_0)( void );
    #+end_src

