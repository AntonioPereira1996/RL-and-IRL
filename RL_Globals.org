#+TITLE: Global variables for the reinforcement learning algorithms
* Contents
  These global variables must be set before calling any RL algorithm :
   - [[file:LSPI.org][LSPI]]
   - [[file:greedy.org][greedy]]
   - [[file:LSTDQ.org][LSTDQ]]
    
  Notice how all those variables are extern, so that not declaring them in your
  program yelds a compilation error.
  
  The variables are : 
  - $\epsilon_{LSPI}$, the value that stops LSPI.
#+begin_src c :tangle RL_Globals.h :main no
  extern double g_dEpsilon_lspi;
#+end_src
  
  - the number of iterations after which the LSPI loop
    is stopped, even if the 
    $||\omega'-\omega|| < \epsilon_{LSPI}$ criterion is 
    not matched
#+begin_src c :tangle RL_Globals.h :main no
  extern unsigned int g_iIt_max_lspi;
#+end_src
  
  - $k$, the dimension of the feature space
#+begin_src c :tangle RL_Globals.h :main no
  extern unsigned int g_iK;
#+end_src
  
  - $\phi : S\times A\rightarrow \mathbb{R}^k$, the features 
    over which Q is approximated
#+begin_src c :tangle RL_Globals.h :main no
  extern gsl_matrix* (*g_fPhi)(gsl_matrix*);
#+end_src
  
  - $n_a$, the dimension of the action space
#+begin_src c :tangle RL_Globals.h :main no
  extern unsigned int g_iA; 
#+end_src
  
  - $n_s$ the dimension of the state space
#+begin_src c :tangle RL_Globals.h :main no
  extern unsigned int g_iS;
#+end_src
  
  - $\gamma_{LSTDQ}$ the discount factor for LSPI and LSTDQ
#+begin_src c :tangle RL_Globals.h :main no
  extern double g_dGamma_lstdq;
#+end_src
  
  - $\omega$, the matrix of parameters that defines the Q
    function on which the greedy mechanism works
#+begin_src c :tangle RL_Globals.h :main no
  extern gsl_matrix* g_mOmega;
#+end_src
  
  - the matrix of all actions, one per line, 
    iterated over by the greedy mechanism to find the best action
#+begin_src c :tangle RL_Globals.h :main no
  extern gsl_matrix* g_mActions; 
#+end_src
  
  - $\lambda_{LSTDQ}$, the regularization coeff for the A matrix.
#+begin_src c :tangle RL_Globals.h :main no
  extern double g_dLambda_lstdQ; 
#+end_src


* Makefile rules
  We just tangle the file and give a rule to clean the result. Nothing fancy here.
  #+srcname: RL_Globals_make
  #+begin_src makefile
RL_Globals.h: RL_Globals.org
	$(call tangle,"RL_Globals.org")

RL_Globals_clean:
	find . -maxdepth 1 -iname "RL_Globals.h"   | xargs -t rm
  #+end_src
