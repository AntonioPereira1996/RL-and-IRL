#+TITLE:Protocoles expérimentaux pour l'IRL
#+LATEX_HEADER:\usepackage[plain,cm]{fullpage} 
#+LATEX_HEADER:\usepackage{algorithm}
* Les Benchmarks
  On dispose de trois tests pour nos algorithmes, par ordre de difficulté on a le GridWorld, le pendule inversé et le highway. Le GridWorld est très simple à analyser, toutes les fonctions sont représentées sous forme tabulaires, les probabilités de transitions sont connues. On peut visualiser de la récompense et la fonction de valeur et interpréter cette visualisation.\\

  Le pendule est un peu plus complexe. Les probabilités de transitions sont inconnues, mais grâce à \cite{lagoudakis2003least}, on dispose d'outils d'analyse (LSPI et les features associées sur ce problème) qui alliés au simulateur que l'on a codé permettent des calculs à une précision arbitrairement grande. Les actions sont discrètes mais les états sont continus. La visualisation de la récompense et de la fonction de valeur, bien qu'elle soit plus dure à interpréter que sur le GridWorld apporte de la valeur à la discussion.\\

  Le highway, une fois qu'il sera modifié pour compenser les défauts de celui de Syed, est un problème ambivalant. Bien qu'il soit formellement discret et puisse être vu sous cet aspect comme le GridWorld, on le traitera dans certaines expériences comme continu (il faudra alors définir un set de features qui fonctionne, problème qui n'est pas sans soulever quelques difficultés). Il a ceci de plus que le GridWorld qu'il permet de chouettes démos, puisqu'il est assez visuel dans sa représentation : l'ordi conduit la voiture, évite les collisions, etc.\\

* Les algorithmes
  Dans un premier temps, on ne va tester que deux algorithmes, ANIRL d'Abbeel \cite{abbeel2004apprenticeship} et SCIRL de nous. Cela parce qu'ils sont déjà implémentés. ANIRL est un algo reconnu dans la littérature et beaucoup de papier l'utilisent comme comparaison, il est donc légitime que nous nous comparions également à lui. SCIRL est notre petit nouveau dont nous allon essayer d'exhiber une preuve empirique du fait qu'il fonctionne.\\

  On va réutiliser les implémentations d'ANIRL utilisées lors du travail sur LSTD$\mu$. Il faudra adapter un brin pour permettre une résolution exacte dans les cas qui l'exigent, mais de manière générale l'algo reste le même, à savoir la variante décrite comme la méthode par projection, dont les seuls paramètres propres (c'est à dire qui ne sont pas liés à une sous routine particulière) sont liés au critère d'arrêt. La valeur $t = ||\mu_E - \bar\mu||_2$ doit pouvoir passer en dessous d'une certaine valeur $\epsilon_A$. Dans le cas où cela est impossible (à cause d'erreurs dans ce que retournent les routines, par exemple), l'algorithme s'arrête après $T_A$ itérations.\\

  L'implémentation de SCIRL est la dernière en date, à savoir celle où la descente de sous-gradient est normalisée (l'update est $\theta_{t+1} = \theta_t -\alpha_t {\Delta\theta\over N ||\Delta\theta||_2}$) et où l'on retourne le meilleur résultat obtenu (celui avec le plus petit gradient) et non le dernier. Les paramètres propres de cet algorithmes sont la fonction $l$, le pas d'apprentissage $\alpha$, le nombre maximum d'itérations $T_S$, un seuil sur la norme du gradient $\epsilon_S$ et le vecteur récompense initial $\theta_0$. On prévoit à priori d'utiliser partout la fonction $l$ classique qui consiste à renvoyer $1$ en cas de désaccord avec l'expert et à renvoyer $0$ en cas d'accord. De la même manière on prévoit à priori d'initialiser le vecteur récompense $\theta$ à 0.

* Considérations philosophiques sur le plan d'expériences proposé
  
  Dans un premier temps, les deux algorithmes considérés vont être testés sur les trois benchmarks dans le cas "parfait" où ils disposent de toute l'information nécessaire. Cela signifie pour le GridWorld et le highway l'exploitation des probabilités de transition par des algorithmes de programmation dynamique exacts et pour le pendule l'utilisation de données du simulateur en nombre suffisant pour permettre une grande précision.\\

  Un des buts de cet démarche est de faire une démonstration de la pertinence de SCIRL en le comparant ses résultats à ceux d'un algo reconnu de la litérature à savoir ANIRL. Cela confirmerait les résultats théoriques obtenus par Bilal et Matthieu.\\

  L'autre but, beaucoup plus pragmatique, est de pouvoir trouver les paramètres propres des algorithmes en s'affranchissant des doutes sur les sous routines pusique celles-ci sont des sous routines exactes ou approchées mais très bonnes et ayant fait leurs preuves par ailleurs dans le cas du pendule.\\

  Dans un second temps, on passera en conditions complètement dégradées, où seules sont accessibles les données de l'expert. Sur les deux benchmarks les plus durs, ANIRL ne devrait pas être en mesure de fournir de résultats. Il faudra alors comparer les résultats fournis par SCIRL à une ou plusieurs baselin aléatoires afin de montrer qu'ils sont meilleurs. Ce round d'expériences a pour but de montrer que notre algo réussit là où les autres échouent, c'est à dire dans les cas qui se rapprochent des cas d'application rééls.\\

Pour augmenter la pertinence de la démarche dans le cas dégradé, il faudra assez rapidement introduire d'autres algorithmes, notamment le Relative Entropy de boularias qui ont des prétentions relativement similaires aux nôtres. On pourra alors comparer les résultats et se positionner. Si même Relative Entropy ne permet pas d'obtenir des résultats dans ces conditions, alors il faudra introduire de l'information petit à petit (on pourra faire de même pour ANIRL) jusqu'à ce que l'algo fonctionne au même niveau que SCIRL dans le cas entièrement dégradé. On pourra alors dire "tel et tel algo ont besoin d'exactement tant de données en plus que nous pour arriver au même résultat". Ca a déjà en partie été fait sur ANIRL lors du travail sur LSTD$\mu$.

* Choix des paramètres
  Certains paramètres propres des algos devront être réglés, les valeurs qui fonctionnent n'étant pas encore connues. Il faut égelement mener une réflexion sur la valeur des paramètres des sous routines utilisées.\\

  En ce qui concerne le set de features permettant le travail sur le highway dans le cas dégradé, un bon indicateur pourrait être la bonne résolution du problème par LSPI. Aussi une des expériences qui devra être tentée est la résolution du highway par LSPI, en comparant la qualité des politiques trouvées avec celles trouvées par les algos de programmation dynamique.\\

  Le choix du paramètre de SCIRL $alpha(t)$ se fera en fixant $T_S$ à une valeur réellement énorme (correspondant à plusieurs heures de calcul) et en regardant l'évolution du gradient en fonction de la valeur choisie pour le paramètre $\alpha(t)$ parmis un set de départ. Un tatonnement manuel guidé par des observations telles que "Quelle est la velur minimale du gradient ?", "Au bout de combien d'itération est-elle atteinte ?" sur le set prédéfini devrait au final amener à trouver un jeu de paramètres pour chacun des benchmarks.\\
* Expériences
** Expérience : Déterminer la quantité de données nécessaire à LSPI pour résoudre le pendule
** Sous routines dans le cas exact pour les trois benchmarks
   GridWrold et Highway : Dynamic programming
   Pendule : LSPI avec suffisament
** Expérience : Abbeel dans le cas parfait sur les trois benchmarks
** Expérience : SCIRL dans le cas parfait sur les trois benchmarks
** Expérience : Résolution du highway par LSPI
   Features proposées :
** Sous routines dans le cas dégradé pour les trois benchmarks
** Expérience : Abbeel dans le cas dégradé sur les trois benchmarks
** Expérience : SCIRL dans le cas dégradé sur les trois benchmarks
\bibliographystyle{plain}
\bibliography{../Biblio/Biblio}
