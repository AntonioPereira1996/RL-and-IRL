#+TITLE: Trajectory generator in a 4 states chainwalk
* C Implementation

This program generates a random walk in a 4 states chain. See \cite{lagoudakis2003least} for a longer explanation of this toy problem. The transitions are output on the standard output. They have the following format $s~a~s'~r~eoe$ where : 
 - s and s' are int in [1:4], 1 being the rightmost state and 4 the leftmost
 - a is an int in [0:1], 0 means left and 1 means right
 - r is the reward, 1 in states 2 and 3, 0 otherwise
 - eoe is the end of episode flag. If not at the end of a trajectory its value is 1, 0 otherwise

The code is pretty straightforward.

#+begin_src c :tangle ChainWalk_generator.c :main no
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <gsl/gsl_matrix.h>
#include "utils.h"
int main(int argc, char* argv[]){
  srand(time(NULL)+getpid()); rand(); rand();rand();
  if (argc != 2){
    printf("usage :\n %s <trajLength>\n", argv[0] );
    return -1;
  }
  unsigned int trajLength = atoi(argv[1]);
  
  int s = random_int( 1, 4 );

  for( unsigned int j = 0 ; j < trajLength ; j++ ){
    int a = random_int( 0, 1 );
    int is_noisy = rand_1_in_10();
    int true_a = a;
    if( is_noisy ){
      true_a = !a;
    }
    int s_dash = s;
    switch( true_a ){
    case 0: //Left
      if( s > 1 ){
	s_dash--;
      }
      break;
    case 1: //Right
      if( s < 4 ){
	s_dash++;
      }
      break;
    }
    int reward = 0;
    if( s == 2 || s == 3 ){
      reward = 1;
    }
    int eoe = 1;
    printf( "%d %d %d %d %d\n",
	    s, a, s_dash, reward, eoe );
    s = s_dash;
  }
  
  return 0;
}
#+end_src


* Makefile rules
  Some rules to tangle the source files :
  #+srcname: Generator_code_make
  #+begin_src makefile
Chainwalk_generator.c: Chainwalk_generator.org 
	$(call tangle,"Chainwalk_generator.org")
  #+end_src

   A rule to create the object file :
  #+srcname: Generator_c2o_make
  #+begin_src makefile
Chainwalk_generator.o: Chainwalk_generator.c ../utils.h 
	$(call c2obj,"Chainwalk_generator.c")
  #+end_src

   A rule to create the executable from the object file :
#+srcname: Generator_o2exe_make
#+begin_src makefile
Chainwalk_generator.exe: Chainwalk_generator.o ../utils.o
	$(O2EXE) -o Chainwalk_generator.exe Chainwalk_generator.o ../utils.o
#+end_src


   A rule to clean the mess :
  #+srcname: Generator_clean_make
  #+begin_src makefile
Generator_clean:
	find . -maxdepth 1 -iname "Chainwalk_generator.exe"   | xargs -t rm
	find . -maxdepth 1 -iname "Chainwalk_generator.c"   | xargs -t rm 
	find . -maxdepth 1 -iname "Chainwalk_generator.o"   | xargs -t rm
  #+end_src

