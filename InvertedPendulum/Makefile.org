* Inverted Pendulum
  The Inverted Pendulum is a classical toy problem, used and described for example in \cite{lagoudakis2003least}.

* Implementation
  We have coded both a simulator and a generator.

** Inverted Pendulum generator
   The generator can output transitions on the standard output.

   It can be built by invoking

     #+begin_src sh
 make generator.exe
     #+end_src

   which triggers the following rules :
    #+begin_src make :tangle Makefile
generator.exe: generator.o ../utils.o InvertedPendulum.o
	gcc -o generator.exe $(LFLAGS) generator.o ../utils.o InvertedPendulum.o

generator.o: generator.c InvertedPendulum.h ../utils.h
	gcc -c $(CFLAGS) generator.c

InvertedPendulum.o: InvertedPendulum.c InvertedPendulum.h ../utils.h
	gcc -c $(CFLAGS) InvertedPendulum.c
    #+end_src

   It can then be used like this :

     #+begin_src sh
 ./generator.exe
     #+end_src

** Inverted Pendulum simulator
   The simulator allows the direct interaction of a policy with the pendulum.

   The object file is built according to the following rule :
    #+begin_src make :tangle Makefile
simulator.o: simulator.c InvertedPendulum.h ../utils.h simulator.h
	gcc -c $(CFLAGS) simulator.c
    #+end_src
* Original research
** LSTD-$\mu$
   The inverted pendulum has been used as a benchmark in a paper about LSTD-$\mu$.

   This directory contains the code to generate some of the plots used in the forementionned paper. One single executable generates all the data, which is then selected and plotted.

*** Data generation
    The data is made as follow :
    #+begin_src make :tangle Makefile
plot.dat: plot.samples plot.exe
	./plot.exe > plot.dat

clean_plot.dat:
	find . -maxdepth 1 -iname "*.dat"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.samples" | xargs -tr rm

plot.samples: generator.exe 
	./generator.exe > Samples.dat && touch plot.samples

plot.exe: plot.o ../utils.o ../LSPI.o simulator.o ../greedy.o ../LSTDQ.o ../abbeel2004apprenticeship.o ../LSTDmu.o ../criteria.o InvertedPendulum.o
	gcc -o plot.exe $(LFLAGS) plot.o ../utils.o ../LSPI.o simulator.o ../greedy.o ../LSTDQ.o ../abbeel2004apprenticeship.o ../LSTDmu.o ../criteria.o InvertedPendulum.o

plot.o: plot.c InvertedPendulum.h ../utils.h ../LSPI.h ../greedy.h simulator.h ../abbeel2004apprenticeship.h ../LSTDmu.h
	gcc -c $(CFLAGS) plot.c
    #+end_src

*** Sensitivity of the quality of the policy to the number of samples fed to LSPI
**** No error bars
    Figure 2 of the paper can be made as follow :

     #+begin_src sh
 make threshold.tex
     #+end_src

   which triggers the following rules :
    #+begin_src make :tangle Makefile
threshold.tex: threshold.pdf
	cat threshold.tex | sed "s|threshold|../Code/InvertedPendulum/threshold|g" > tmp.tex && mv tmp.tex threshold.tex

threshold.pdf: threshold.eps
	epstopdf threshold.eps

threshold.eps: threshold_lstd.dat threshold_mc.dat threshold.gp
	gnuplot threshold.gp

threshold_lstd.dat: plot.dat
	cat plot.dat | grep "^LSTD" | sed 's/LSTD //' | cut -d' ' -f'2 3' > threshold_lstd.dat

clean_threshold_lstd.dat: clean_plot.dat

threshold_mc.dat: plot.dat
	cat plot.dat | grep "MC" | sed 's/MC //' | cut -d' ' -f'2 3' > threshold_mc.dat

clean_threshold_mc.dat: clean_plot.dat
    #+end_src
**** Error bars
    Figure 3 of the paper can be made as follow :
     #+begin_src sh
 make threshold_EB.tex
     #+end_src

   which triggers the following rules :
    #+begin_src make :tangle Makefile
threshold_EB.tex: threshold_EB.pdf
	cat threshold_EB.tex | sed "s|threshold_EB|../Code/InvertedPendulum/threshold_EB|g" > tmp.tex && mv tmp.tex threshold_EB.tex

threshold_EB.pdf: threshold_EB.eps
	epstopdf threshold_EB.eps

threshold_EB.eps: threshold_lstd.dat-0 threshold_mc.dat-0 threshold_EB.gp ErrorBars
	gnuplot threshold_EB.gp

threshold_lstd.dat-0: ErrorBars

threshold_mc.dat-0: ErrorBars

.PHONY: ErrorBars

ErrorBars:
	../../Utils/ErrorBars.py
    #+end_src
* Cleaning
  Two different target exists for cleaning.

  clean does regular cleaning : 

    #+begin_src make :tangle Makefile
clean:
	find . -maxdepth 1 -iname "*.o"       | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.pdf"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.exe"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.dat"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*~"        | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.samples" | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.pyc"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.eps"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*.tex"     | xargs -tr rm &&\
	find . -maxdepth 1 -iname "*-0"       | xargs -tr rm
    #+end_src

  nuke removes the data generated by the ErrorBars.py script, which may take a very long time to generate. Hence a separated target to avoid accidents.

    #+begin_src make :tangle Makefile
nuke: #You probably don't want to make this one
	find ErrorBars/ -maxdepth 1 -iname "*.dat*" | xargs -tr rm
    #+end_src
