#+TITLE: Trajectory generator for the inverted pendulum
* C Implementation
This program shares code with the simulator. 

We use the GSL.
#+begin_src c :tangle generator.c :main no
#include <stdlib.h>
#include <time.h>
#include <unistd.h>
#include <math.h>
#include "InvertedPendulum.h"
#include <gsl/gsl_matrix.h>
#include "utils.h"
#+end_src

We set how many trajectories we want and how long we want them to be at most.
#+begin_src c :tangle generator.c :main no
#define NUMBER_OF_WALKS (500)
#define MAX_WALK_LENGTH (3000)
#+end_src

The rest is straightforward, initialize, steps till the end, rinse, repeat.
#+begin_src c :tangle generator.c :main no
int main( void ){
  srand(time(NULL)+getpid()); rand(); rand();rand();
  for( unsigned int i = 0 ; i < NUMBER_OF_WALKS ; i++ ){
    double state_p;//position
    double state_v;//vitesse
    iv_init( &state_p, &state_v );
    int eoe = 1;
    for( unsigned int j = 0 ; j < MAX_WALK_LENGTH && eoe == 1 ; 
	 j++ ){
      double next_state_p;
      double next_state_v;
      double reward;
      unsigned int action = random_int( LEFT, RIGHT );
      iv_step( state_p, state_v, action, 
	       &next_state_p, &next_state_v, &reward, &eoe );
      if( j == MAX_WALK_LENGTH - 1 ){
	eoe = 0;
      }
      printf("%lf %lf %d %lf %lf %lf %d\n",
	     state_p, state_v, action, 
	     next_state_p, next_state_v, reward, eoe );
      state_p = next_state_p;
      state_v = next_state_v;
    }
  }
  return 0;
}
#+end_src
* Makefile rules
  Some rules to tangle the source files :
  #+srcname: Generator_code_make
  #+begin_src makefile
generator.c: generator.org 
	$(call tangle,"generator.org")
  #+end_src

   A rule to create the object file :
  #+srcname: Generator_c2o_make
  #+begin_src makefile
generator.o: generator.c InvertedPendulum.h ../utils.h 
	$(call c2obj,"generator.c")
  #+end_src

   A rule to create the executable from the object file :
#+srcname: Generator_o2exe_make
#+begin_src makefile
generator.exe: generator.o ../utils.o InvertedPendulum.o
	$(O2EXE) -o generator.exe generator.o ../utils.o InvertedPendulum.o
#+end_src


   A rule to clean the mess :
  #+srcname: Generator_clean_make
  #+begin_src makefile
Generator_clean:
	find . -maxdepth 1 -iname "generator.exe"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "generator.c"   | xargs $(XARGS_OPT) rm 
	find . -maxdepth 1 -iname "generator.o"   | xargs $(XARGS_OPT) rm
  #+end_src

