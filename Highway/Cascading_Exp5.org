#+TITLE: Cascading IRL (SxA version) on the Highway

* Computation
#+begin_src python :tangle Cascading_Exp5.py
import sys
sys.path+=['..']
from numpy import *
import scipy
import Cascading
import Highway

from DP import *
from DP_mu import *


D_E = genfromtxt( sys.argv[1] )
assert D_E[-1,10] == 0 #End of episode ?
#FIXME A[N:N+1][0] == A[N], I'm chtoopid sometimes
Data = map( lambda trans: [trans[0:4],trans[4:5][0],trans[5:9],trans[10:11][0]], D_E ) #s,a,s',eoe 
theta_SA,omega_Q = Cascading.runSA( Data, Highway.phi, Highway.A )
perf_SA = Highway.evaluate_thetaSA( theta_SA, Highway.phi )

Pi_classif = omega2pi( omega_Q, Highway.phi, Highway.Sgenerator(), Highway.s_index, [Highway.P( a ) for a in Highway.A ] )
perf_classif = Highway.evaluate_Pi( Pi_classif )[0]

print "%d\t%lf\t%lf"%(D_E.shape[0], perf_SA, perf_classif )

#+end_src

#+srcname: Cascading_Exp5_make
#+begin_src makefile
Cascading_Exp5.py: Cascading_Exp5.org
	$(call tangle,"Cascading_Exp5.org")

Cascading_Exp5: Cascading_Exp5.py Highway.py ../DP.py Mu_E.mat ../Cascading.py ../LAFEM.py DE.py ../a2str.py
	for i in $(LM_VALUES); \
	do \
	python DE.py $$i > DE.mat; \
	python Cascading_Exp5.py DE.mat >> Cascading_Exp5.mat; \
	done


../Cascading.py:
	make -C .. Cascading.py

#+end_src

* Plotting
#+begin_src python :tangle Cascading_Exp5_plot.py
from matplotlib import rc
rc('text', usetex=True)
import sys
sys.path+=['..']
from numpy import *
import scipy
import pylab as pylab
from Plot import *

D_Cascading = genfromtxt( "Cascading_Exp5.mat" )
D_C = D_Cascading[:,[0,1]]
D_Classif = D_Cascading[:,[0,2]]
myPlot = Plot()
myPlot.Expert = 7.74390968 #python Expert.py to get this value
myPlot.Random_mean = -1.5821833963484#See Highway.org about Random.py for information on these values
myPlot.Random_min = -4.0007295890199996#python Random.py to get this value
myPlot.Random_max = 2.7064859345599999#python Random.py to get this value
myPlot.Random_var = 1.4465398450419833#python Random.py to get this value

myPlot.ymin = -5
myPlot.ymax = 10

myPlot.plot( D_C, 'orange', 'Cascading_Exp5_fig1.pdf' )
myPlot.plot( D_Classif, 'yellow', 'Cascading_Exp5_fig2.pdf' )
#The second plot is non standard, we want the results of ANIRL_Exp5 to appear as well.

[X,Y_mean,Y_min,Y_max] = map( array, mean_min_max( D_Classif ))
[X,Y_mean,Y_var] = map( array, mean_var( D_Classif ))
pylab.figure(1)
pylab.clf()
x_min = min(X)
x_max = max(X)
y_max = myPlot.ymax
y_min = myPlot.ymin
pylab.axis([x_min,x_max,y_min,y_max])
pylab.xlabel('Number of samples from the expert')
pylab.ylabel('${1\over card(S)}\sum\limits_{s\in S}V(s)$')
pylab.grid(True)
filled_mean_min_max( pylab, X, Y_mean, Y_min, Y_max, 'yellow', 0.2,'--',None,None)
filled_mean_min_max( pylab, X, Y_mean, Y_mean - Y_var, Y_mean + Y_var, 'yellow', 0.4,'-.',None,None)

filled_mean_min_max( pylab, X, myPlot.Random_mean*ones(X.shape), myPlot.Random_min*ones(X.shape), myPlot.Random_max*ones(X.shape), 'cyan',0.2,'--',"Agent trained on a random reward",None)
filled_mean_min_max( pylab, X, myPlot.Random_mean*ones(X.shape), (myPlot.Random_mean-myPlot.Random_var)*ones(X.shape), (myPlot.Random_mean+myPlot.Random_var)*ones(X.shape), 'cyan',0.4,'-.',None,None)

pylab.plot(X,myPlot.Expert*ones(X.shape), color='cyan',label="Expert",lw=2,ls=':')

filled_mean_min_max( pylab, X, 7.2183449001*ones(X.shape),  7.2125435575500001*ones(X.shape), 7.2235682889100001*ones(X.shape), 'blue',0.2,'--',"ANIRL with full info",None)
filled_mean_min_max( pylab, X, 7.2183449001*ones(X.shape), (7.2183449001-1.0470405042575963e-05)*ones(X.shape), (7.2183449001+1.0470405042575963e-05)*ones(X.shape), 'blue',0.4,'-.',None,None)

pylab.savefig("Cascading_Exp5_fig2.pdf",transparent=True)

#+end_src
FIXME: Le plot concernat ANIRL devrait avoir son code dans ANIRL_Exp6.org et non ici.

#+srcname: Cascading_Exp5_make
#+begin_src makefile
Cascading_Exp5_plot.py: Cascading_Exp5.org
	$(call tangle,"Cascading_Exp5.org")

Cascading_Exp5_fig1.pdf: Cascading_Exp5_plot.py Cascading_Exp5.mat ../Plot.py
	python Cascading_Exp5_plot.py
#+end_src


* Stuff
  #+srcname: Cascading_Exp5_clean_make
  #+begin_src makefile
Cascading_Exp5_clean:
	find . -maxdepth 1 -iname "Cascading_Exp5.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp5.tex"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp5_*"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp5.mat"   | xargs $(XARGS_OPT) rm
  #+end_src
