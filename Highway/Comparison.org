#+TITLE:Comparaison entre quelques algorithmes d'imitation

Utilisons ici les résultats obtenus dans [[file:MWAL.org]] et [[file:SCIRL.org]] à des fins de comparaison.

La valeur qui nous importe est celle de la fonction de valeur dans l'état initial, $V(s_0)$, relativement à la vraie fonction de récompense. Nous effectuons ce calcul grâce à la formule : $V(s_0) = \theta^T\mu(s_0)$, et nous estimons $\mu(s_0)$ grâce à une estimation de Monte-Carlo.

#+begin_src python :tangle FastResults_scirl.py
from numpy import*
import sys


Fast_R = genfromtxt( "al_code/fast_reward.mat" )

Fast_mu_scirl = genfromtxt( "PlayFast_scirl_mu_"+sys.argv[1]+".mat" )
Fast_scirl_V = dot(Fast_R, Fast_mu_scirl)

print Fast_scirl_V
#+end_src

#+begin_src python :tangle FastResults_mwal.py
from numpy import*
import sys


Fast_R = genfromtxt( "al_code/fast_reward.mat" )

Fast_mu_mwal = genfromtxt( "PlayFast_mwal_mu_"+sys.argv[1]+".mat" )

Fast_mwal_V = dot(Fast_R, Fast_mu_mwal)
 
print Fast_mwal_V
#+end_src

#+begin_src python :tangle SafeResults_scirl.py
from numpy import*
import sys


Safe_R = genfromtxt( "al_code/safe_reward.mat" )

Safe_mu_scirl = genfromtxt( "PlaySafe_scirl_mu_"+sys.argv[1]+".mat" )
Safe_scirl_V = dot(Safe_R, Safe_mu_scirl)

print Safe_scirl_V
#+end_src

#+begin_src python :tangle SafeResults_mwal.py
from numpy import*
import sys


Safe_R = genfromtxt( "al_code/safe_reward.mat" )

Safe_mu_mwal = genfromtxt( "PlaySafe_mwal_mu_"+sys.argv[1]+".mat" )

Safe_mwal_V = dot(Safe_R, Safe_mu_mwal)
 
print Safe_mwal_V
#+end_src


#+begin_src python :tangle ExpertsResults.py
from numpy import*
import sys


Fast_R = genfromtxt( "al_code/fast_reward.mat" )
Safe_R = genfromtxt( "al_code/safe_reward.mat" )
Fast_mu = genfromtxt( "PlayFast_mu_300.mat" ) #FIXME on devrait pas avoir a specifier 300 ici, c'est redondant avec N_VALUES
Safe_mu = genfromtxt( "PlaySafe_mu_300.mat" )
Fast_true_V = dot(Fast_R, Fast_mu)
Safe_true_V = dot(Safe_R, Safe_mu)
f_Fast_true = open( "FastResults_true.mat", "w" ) #The last to be written i.e. the one with
f_Safe_true = open( "SafeResults_true.mat", "w" ) #the most samples will overwrite the others (see the makefile rules)
f_Fast_true.write("%e\n"% Fast_true_V ) #No abscissa we want a flat line
f_Safe_true.write("%e\n"% Safe_true_V )
f_Fast_true.close()
f_Safe_true.close()

#+end_src


#+srcname: Comparison_make
#+begin_src makefile
FastResults_scirl.py: Comparison.org
	$(call tangle,"Comparison.org")
FastResults_mwal.py: Comparison.org
	$(call tangle,"Comparison.org")
SafeResults_scirl.py: Comparison.org
	$(call tangle,"Comparison.org")
SafeResults_mwal.py: Comparison.org
	$(call tangle,"Comparison.org")
ExpertsResults.py: Comparison.org
	$(call tangle,"Comparison.org")

FastResults_scirl.mat: FastResults_scirl.py PlayFast_scirl_mu_X.mat al_code/fast_reward.mat
	touch FastResults_scirl.mat
	rm FastResults_scirl.mat
	for i in $(N_VALUES); do (echo -n "$$i " && python FastResults_scirl.py $$i) >> FastResults_scirl.mat; done

FastResults_mwal.mat: FastResults_mwal.py PlayFast_mwal_mu_X.mat al_code/fast_reward.mat
	touch FastResults_mwal.mat
	rm FastResults_mwal.mat
	for i in $(N_VALUES); do (echo -n "$$i " && python FastResults_mwal.py $$i) >> FastResults_mwal.mat; done

SafeResults_scirl.mat: SafeResults_scirl.py PlaySafe_scirl_mu_X.mat al_code/safe_reward.mat
	touch SafeResults_scirl.mat
	rm SafeResults_scirl.mat
	for i in $(N_VALUES); do (echo -n "$$i " && python SafeResults_scirl.py $$i) >> SafeResults_scirl.mat; done

SafeResults_mwal.mat: SafeResults_mwal.py PlaySafe_mwal_mu_X.mat al_code/safe_reward.mat
	touch SafeResults_mwal.mat
	rm SafeResults_mwal.mat
	for i in $(N_VALUES); do (echo -n "$$i " && python SafeResults_mwal.py $$i) >> SafeResults_mwal.mat; done

#FIXME:On devrauit pas avoir à spécifier 300 ici, si on change N_VALUES, on est potentiellement marrons
SafeResults_true.mat: PlaySafe_mu_300.mat al_code/safe_reward.mat
	python ExpertsResults.py 

FastResults_true.mat: PlayFast_mu_300.mat al_code/fast_reward.mat
	python ExpertsResults.py 

#+end_src


Une fois cette valeur calculée, il est possible de la plotter.

Nous allons calculer plusieurs fois l'estimation de Monte-Carlo de la valeur afin d'obtenir des barres d'erreur.
The first thing to do is to define a clean rule to remove the file to plot and all the other files that have been used to create it, so that making it again will be a statistically independant experiment.

  #+srcname: Comparison_make
  #+begin_src makefile
clean_FastResults_scirl.mat: clean
clean_FastResults_mwal.mat: clean
clean_SafeResults_scirl.mat: clean
clean_SafeResults_mwal.mat: clean
  #+end_src

  #+begin_src python :tangle Comparison_conf.py
g_nlInput = ['FastResults_scirl.mat', ['-d" " -f\'1 2\''], [],
             'FastResults_mwal.mat', ['-d" " -f\'1 2\''], [],
             'SafeResults_scirl.mat', ['-d" " -f\'1 2\''], [],
             'SafeResults_mwal.mat', ['-d" " -f\'1 2\''], []]
g_iN = 2

  #+end_src

FIXME: Dans tous les ErrorBars, on devrait pas avoir à make-er la cible à blanc une fois avant.

  #+srcname: Comparison_make
  #+begin_src makefile
Comparison_conf.py: Comparison.org 
	$(call tangle,"Comparison.org")

Comparison_ErrorBars: Comparison_conf.py FastResults_scirl.mat FastResults_mwal.mat SafeResults_scirl.mat SafeResults_mwal.mat
	mv Comparison_conf.py conf.py
	../../Utils/ErrorBars.py
	rm conf.py

FastResults_mwal.mat-0: Comparison_ErrorBars
FastResults_scirl.mat-0: Comparison_ErrorBars
SafeResults_mwal.mat-0: Comparison_ErrorBars
SafeResults_scirl.mat-0: Comparison_ErrorBars

  #+end_src

Les fichiers ainsi obtenus, =[Fast|Safe]Results_[scirl|mwal}.mat-0= permettent de tracer deux jolies courbes comparatives.


  #+begin_src gnuplot :tangle FastResults_EB.gp
set output "FastResults_EB.ps"
set term postscript enhanced color
set xrange [0:330]
#set yrange [0.02:0.025]
set ylabel "Performance"
set key bottom right
set xlabel "Number of samples from the expert"
set grid
plot "./FastResults_scirl.mat-0" u 1:2 w lines ls 1 notitle, "./FastResults_scirl.mat-0" u 1:2:3 w errorbars ls 1 title "SCIRL", "./FastResults_mwal.mat-0" u 1:2 w lines ls 2 notitle, "./FastResults_mwal.mat-0" u 1:2:3 w errorbars ls 2 title "MWAL", "FastResults_true.mat" u (20):($1):(290):(0) w vector nohead ls 3 title "Expert"

#+end_src

#+begin_src gnuplot :tangle SafeResults_EB.gp
set output "SafeResults_EB.ps"
set term postscript enhanced color
set xrange [0:330]
#set yrange [0.01:0.018]
set ylabel "Performance"
set xlabel "Number of samples from the expert"
set key bottom right
set grid
plot "./SafeResults_scirl.mat-0" u 1:2 w lines ls 1 notitle, "./SafeResults_scirl.mat-0" u 1:2:3 w errorbars ls 1 title "SCIRL", "./SafeResults_mwal.mat-0" u 1:2 w lines ls 2 notitle, "./SafeResults_mwal.mat-0" u 1:2:3 w errorbars ls 2 title "MWAL", "SafeResults_true.mat" u (20):($1):(290):(0) w vector nohead ls 3 title "Expert"

#+end_src

  #+srcname: Comparison_make
  #+begin_src makefile
FastResults_EB.gp: Comparison.org
	$(call tangle,"Comparison.org")

FastResults_EB.pdf: FastResults_EB.gp FastResults_mwal.mat-0 SafeResults_scirl.mat-0 FastResults_true.mat 
	gnuplot FastResults_EB.gp
	ps2pdf FastResults_EB.ps
	rm FastResults_EB.ps

SafeResults_EB.gp: Comparison.org
	$(call tangle,"Comparison.org")

SafeResults_EB.pdf: SafeResults_EB.gp SafeResults_mwal.mat-0 SafeResults_scirl.mat-0 SafeResults_true.mat 
	gnuplot SafeResults_EB.gp
	ps2pdf SafeResults_EB.ps
	rm SafeResults_EB.ps

  #+end_src


  #+srcname: Comparison_clean_make
  #+begin_src makefile
Comparison_clean:
	find . -maxdepth 1 -iname "ExpertsResults.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Comparison_conf.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "FastResults_*"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "SafeResults_*"   | xargs $(XARGS_OPT) rm
  #+end_src
