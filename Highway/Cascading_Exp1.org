#+TITLE: Cascading IRL on the Highway

On compare les performences des différentes configurations de notre algo : 
 - Features naturelles (N) ou features informatives (I)
 - Utilisation de $a'_i$ (E) ou de $\pi_C(s')$ (C)

Soit 4 combinaisons en tout : NE, NC, IE et IC. Un seul script qui prend en argument le fichier de données et affiche le nombre de samples et les performances sur la sortie standard, sur une seule ligne, séparés par des tabulations. Dans l'ordre : NE, NC, IE et IC. 
* Computation
#+begin_src python :tangle Cascading_Exp1.py
import sys
sys.path+=['..']
from numpy import *
import scipy
import Cascading
import Highway
from DP import *
from DP_mu import *

D_E = genfromtxt( sys.argv[1] )
Data = map( lambda trans: [trans[0:4],trans[4:5][0],trans[5:9],trans[10:11][0]], D_E ) #s,a,s',eoe 
theta_NE,theta_NC,omega_N = Cascading.run( Data, Highway.psi, Highway.phi, Highway.A )
theta_IE,theta_IC,omega_I = Cascading.run( Data, Highway.psi2, Highway.phi2, Highway.A )

perf_NC = Highway.evaluate_theta( theta_NC, Highway.psi )
perf_IC = Highway.evaluate_theta( theta_IC, Highway.psi2 )
Pi_CN = omega2pi( omega_N, Highway.phi, Highway.Sgenerator(), Highway.s_index, [Highway.P( a ) for a in Highway.A ] )
perf_CN = Highway.evaluate_Pi( Pi_CN )[0]
Pi_CI = omega2pi( omega_I, Highway.phi2, Highway.Sgenerator(), Highway.s_index, [Highway.P( a ) for a in Highway.A ] )
perf_CI = Highway.evaluate_Pi( Pi_CI )[0]

print "%d\t%lf\t%lf\t%lf\t%lf"%(D_E.shape[0], perf_NC, perf_IC, perf_CN, perf_CI )

#+end_src

#+srcname: Cascading_Exp1_make
#+begin_src makefile
Cascading_Exp1.py: Cascading_Exp1.org
	$(call tangle,"Cascading_Exp1.org")
#FIXME Il faudrait rendre les L constant, apparament ya des soucis
LM_VALUES="3 3" "5 5" "7 7" "10 10" "15 15" "20 20"
Cascading_Exp1: Cascading_Exp1.py Highway.py ../DP.py Mu_E.mat ../Cascading.py ../LAFEM.py DE.py ../a2str.py
	for i in $(LM_VALUES); \
	do \
	python DE.py $$i > DE.mat; \
	python Cascading_Exp1.py DE.mat >> Cascading_Exp1.mat; \
	done


../Cascading.py:
	make -C .. Cascading.py

#+end_src

* Plotting
#+begin_src python :tangle Cascading_Exp1_plot.py
from matplotlib import rc
rc('text', usetex=True)
import sys
sys.path+=['..']
from numpy import *
import scipy
import pylab as pylab
from Plot import *

D_Cascading = genfromtxt( "Cascading_Exp1.mat" )
D_N = D_Cascading[:,[0,1]]
D_I = D_Cascading[:,[0,2]]
D_CN = D_Cascading[:,[0,3]]
D_CI = D_Cascading[:,[0,4]]

myPlot = Plot()
myPlot.Expert = 7.74390968 #python Expert.py to get this value
myPlot.Random_mean = -1.5821833963484#See Highway.org about Random.py for information on these values
myPlot.Random_min = -4.0007295890199996#python Random.py to get this value
myPlot.Random_max = 2.7064859345599999#python Random.py to get this value
myPlot.Random_var = 1.4465398450419833#python Random.py to get this value

myPlot.ymin = -5
myPlot.ymax = 10

myPlot.plot( D_N, 'orange', 'Cascading_Exp1_fig1.pdf' )
myPlot.plot( D_I, 'orange', 'Cascading_Exp1_fig2.pdf' )
myPlot.plot( D_CN, 'yellow', 'Cascading_Exp1_fig3.pdf' )
myPlot.plot( D_CI, 'yellow', 'Cascading_Exp1_fig4.pdf' )

#FIXME ranger la generation de la legende dans un endroit utile
#The legend
# fig = pylab.figure(4)
# figlegend = pylab.figure(figsize=(4,2))
# ax = fig.add_subplot(111)
# lines = ax.plot([-1,-1],[-1,-2], color='red',label="Cascading IRL",lw=2,linestyle='-')
# lines += ax.plot([-1,-1],[-1,-2], color='green',label="Abbeen \& Ng IRL",lw=2,linestyle='-')
# lines += ax.plot([-1,-1],[-1,-2], color='cyan',label="Agent trained on a random reward",lw=2,linestyle='-')
# lines += ax.plot([-1,-1],[-1,-2], color='black',label="min, max",lw=1,linestyle='--')
# lines += ax.plot([-1,-1],[-1,-2], color='black',label="Standard deviation",lw=1,linestyle='-.')
# lines += ax.plot([-1,-1],[-1,-2], color='blue',label="Expert",lw=2,linestyle='-')
# figlegend.legend(lines,("Cascading IRL","Abbeel \& Ng IRL","Agent trained on a random reward","min, max","Standard deviation","Expert"),"center")
# figlegend.savefig("Cascading_Exp1_legend.pdf")


#+end_src
FIXME: Le plot concernat ANIRL devrait avoir son code dans ANIRL_Exp6.org et non ici.

#+srcname: Cascading_Exp1_make
#+begin_src makefile
Cascading_Exp1_plot.py: Cascading_Exp1.org
	$(call tangle,"Cascading_Exp1.org")

Cascading_Exp1_fig1.pdf: Cascading_Exp1_plot.py Cascading_Exp1.mat ../Plot.py
	python Cascading_Exp1_plot.py
Cascading_Exp1_fig2.pdf: Cascading_Exp1_plot.py Cascading_Exp1.mat ../Plot.py
	python Cascading_Exp1_plot.py
Cascading_Exp1_fig3.pdf: Cascading_Exp1_plot.py Cascading_Exp1.mat ../Plot.py
	python Cascading_Exp1_plot.py


../Plot.py:
	make -C .. Plot.py

#+end_src


* Stuff
  #+srcname: Cascading_Exp1_clean_make
  #+begin_src makefile
Cascading_Exp1_clean:
	find . -maxdepth 1 -iname "Cascading_Exp1.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp1.tex"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp1_*"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp1.mat"   | xargs $(XARGS_OPT) rm
  #+end_src
