#+TITLE: Cascading IRL on the Highway

On compare les performences des différentes configurations de notre algo : 
 - Features naturelles (N) ou features informatives (I)
 - Utilisation de $a'_i$ (E) ou de $\pi_C(s')$ (C)

Soit 4 combinaisons en tout : NE, NC, IE et IC. Un seul script qui prend en argument le fichier de données et affiche le nombre de samples et les performances sur la sortie standard, sur une seule ligne, séparés par des tabulations. Dans l'ordre : NE, NC, IE et IC. 
* Computation
#+begin_src python :tangle Cascading_Exp1.py
import sys
sys.path+=['..']
from numpy import *
import scipy
import Cascading
import Highway

D_E = genfromtxt( sys.argv[1] )
Data = map( lambda trans: [trans[0:4],trans[4:5][0],trans[5:9],trans[10:11][0]], D_E ) #s,a,s',eoe 
theta_NE,theta_NC = Cascading.run( Data, Highway.psi, Highway.phi, Highway.A )
theta_IE,theta_IC = Cascading.run( Data, Highway.psi2, Highway.phi2, Highway.A )

perf_NE = Highway.evaluate_theta( theta_NE, Highway.psi )
perf_NC = Highway.evaluate_theta( theta_NC, Highway.psi )
perf_IE = Highway.evaluate_theta( theta_IE, Highway.psi2 )
perf_IC = Highway.evaluate_theta( theta_IC, Highway.psi2 )

print "%d\t%lf\t%lf\t%lf\t%lf"%(D_E.shape[0], perf_NE, perf_NC, perf_IE, perf_IC )

#+end_src

#+srcname: Cascading_Exp1_make
#+begin_src makefile
Cascading_Exp1.py: Cascading_Exp1.org
	$(call tangle,"Cascading_Exp1.org")

LM_VALUES="3 3" "5 5" "7 7" "10 10" "15 15" "20 20"
Cascading_Exp1: Cascading_Exp1.py Highway.py ../DP.py Mu_E.mat ../Cascading.py ../LAFEM.py DE.py ../a2str.py
	for i in $(LM_VALUES); \
	do \
	python DE.py $$i > DE.mat; \
	python Cascading_Exp1.py DE.mat >> Cascading_Exp1.mat; \
	done


../Cascading.py:
	make -C .. Cascading.py

#+end_src

* Plotting
#+begin_src python :tangle Cascading_Exp1_plot.py
from matplotlib import rc
rc('text', usetex=True)
import sys
sys.path+=['..']
from numpy import *
import scipy
import pylab as pylab
from Plot import *

D_ANIRL = genfromtxt( "ANIRL_Exp6.mat" )
D_Cascading = genfromtxt( "Cascading_Exp1.mat" )
D_NE = D_Cascading[:,[0,1]]
#D_NC = D_Cascading[:,[0,2]]
D_IE = D_Cascading[:,[0,3]]
#D_IC = D_Cascading[:,[0,4]]
[XA,Y_meanA,Y_minA,Y_maxA] = mean_min_max( D_ANIRL )
[XNE,Y_meanNE,Y_minNE,Y_maxNE] = mean_min_max( D_NE )
#[XNC,Y_meanNC,Y_minNC,Y_maxNC] = mean_min_max( D_NC )
[XIE,Y_meanIE,Y_minIE,Y_maxIE] = mean_min_max( D_IE )
#[XIC,Y_meanIC,Y_minIC,Y_maxIC] = mean_min_max( D_IC )

x_min = min(XA)
x_max = max(XA)
y_min = min( min(Y_minA), min(Y_minNE), min(Y_minIE) )
Expert = 7.74390968*ones(XA.shape) #python Expert.py to get this value
Random = -2.33080728*ones(XA.shape)#python Random.py to get this value
y_max = 8 #Comme ca l'expert peut respirer
y_min = min( Random[0],min(Y_minA), min(Y_minNE), min(Y_minIE) ) - 0.2


#First plot, Cascading with natural features, alone
pylab.figure(1)
pylab.clf()
pylab.axis([x_min,x_max,y_min,y_max])
pylab.xlabel('Number of samples from the expert')
pylab.ylabel('${1\over card(S)}\sum\limits_{s\in S}V(s)$')
#pylab.ylabel('Peformance')
pylab.grid(True)
filled_mean_min_max( pylab, XNE, Y_meanNE, Y_minNE, Y_maxNE, 'red',"Cascading IRL")
pylab.plot(XA,Expert, color='blue',label="Expert",lw=2)
pylab.plot(XA,Random, color='cyan',label="Agent trained on random reward",lw=2)
pylab.legend(loc='center right')

pylab.savefig('Cascading_Exp1_fig1.pdf')


#Second plot, Cascading avec les features informatives, et ANIRL pour comparaison
pylab.figure(2)
pylab.clf()
pylab.axis([x_min,x_max,y_min,y_max])
pylab.xlabel('Number of samples from the expert')
pylab.ylabel('${1\over card(S)}\sum\limits_{s\in S}V(s)$')
#pylab.ylabel('Peformance')
pylab.grid(True)
filled_mean_min_max( pylab, XIE, Y_meanIE, Y_minIE, Y_maxIE, 'red', "Cascading IRL")
filled_mean_min_max( pylab, XA, Y_meanA, Y_minA, Y_maxA, 'green', "Abbeel \& Ng IRL")
pylab.plot(XA,Expert, color='blue',label="Expert",lw=2)
pylab.plot(XA,Random, color='cyan',label="Agent trained on random reward",lw=2)
pylab.legend(loc='center right')
pylab.savefig('Cascading_Exp1_fig2.pdf',transparent=True)

#+end_src
#+srcname: Cascading_Exp1_make
#+begin_src makefile
Cascading_Exp1_plot.py: Cascading_Exp1.org
	$(call tangle,"Cascading_Exp1.org")

Cascading_Exp1_fig1.pdf: Cascading_Exp1_plot.py Cascading_Exp1.mat ../Plot.py
	python Cascading_Exp1_plot.py
Cascading_Exp1_fig2.pdf: Cascading_Exp1_plot.py Cascading_Exp1.mat ../Plot.py
	python Cascading_Exp1_plot.py


../Plot.py:
	make -C .. Plot.py

#+end_src


* Stuff
  #+srcname: Cascading_Exp1_clean_make
  #+begin_src makefile
Cascading_Exp1_clean:
	find . -maxdepth 1 -iname "Cascading_Exp1.py"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp1.tex"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp1_*"   | xargs $(XARGS_OPT) rm
	find . -maxdepth 1 -iname "Cascading_Exp1.mat"   | xargs $(XARGS_OPT) rm
  #+end_src
